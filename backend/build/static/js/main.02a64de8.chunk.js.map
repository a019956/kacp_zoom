{"version":3,"sources":["components/InputField.js","components/SubmitButton.js","stores/UserStore.js","pages/LogIn.js","components/Navbar.js","pages/TimePicker.js","App.js","serviceWorker.js","index.js"],"names":["Inputfield","className","this","props","label","type","placeholder","name","value","size","onChange","Component","SubmitButton","onClick","onSubmit","text","extendObservable","loading","isLoggedIn","user","LogIn","state","username","password","buttonDisabled","handleChange","bind","handleLogIn","doLogIn","setState","e","target","console","log","resetForm","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","alert","msg","Navbar","TimePicker","handleDateChange","date","handleTimeChange","time","handleClick","Date","appointments","handleConfirm","newDate","toLocaleDateString","newTime","toLocaleTimeString","newAppointment","selected","onSelect","dateFormat","minDate","maxDate","addDays","timeintervals","showTimeSelect","App","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.02a64de8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/InputField.css'\r\n\r\nclass Inputfield extends Component {\r\n    render() {\r\n        return (\r\n                <form className=\"inputField\">\r\n                    <label>\r\n                        {this.props.label}\r\n                    </label>\r\n                    <input\r\n                    className='input'\r\n                    type={this.props.type}\r\n                    placeholder={this.props.placeholder}\r\n             \t\tname={this.props.name}\r\n            \t\tvalue={this.props.value}\r\n            \t\tsize={15}\r\n\t\t\t\t\tonChange={this.props.onChange} />\r\n                </form>\r\n        );\r\n    }\r\n}\r\nexport default Inputfield","import React, { Component } from 'react';\r\nimport '../styles/SubmitButton.css'\r\n\r\nclass SubmitButton extends Component {\r\n    render() {\r\n        return (\r\n            <button className='log-in-button'\r\n            onClick = {this.props.onSubmit}>\r\n                {this.props.text}\r\n            </button>\r\n        )};\r\n}\r\nexport default SubmitButton","import {extendObservable} from 'mobx';\r\n\r\nclass UserStore{\r\n    constructor() {\r\n        extendObservable(this, {\r\n            loading: true,\r\n            isLoggedIn: false,\r\n            user: ''\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();","import React, { Component } from 'react';\r\nimport '../styles/LogIn.css'\r\nimport InputField from '../components/InputField'\r\nimport SubmitButton from '../components/SubmitButton'\r\nimport UserStore from '../stores/UserStore';\r\n\r\nclass LogIn extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            //to prevent logging in twice\r\n            buttonDisabled: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleLogIn = this.handleLogIn.bind(this);\r\n        this.doLogIn = this.doLogIn.bind(this);\r\n    };\r\n    resetForm() {\r\n        this.setState({\r\n            username: '',\r\n            password: ''\r\n        })\r\n    }\r\n    handleChange(e) {\r\n\t\tthis.setState({[e.target.name]: e.target.value});\r\n\t}\r\n    handleLogIn(e) {\r\n        console.log(this.state.username)\r\n        console.log(this.state.password)\r\n        this.resetForm()\r\n    };\r\n\r\n    async doLogIn() {\r\n\r\n        if (this.state.username == '') {\r\n            console.log('no id')\r\n            return;\r\n        }\r\n        if (this.state.password == '') {\r\n            console.log('no pw')\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            buttonDisabled: true\r\n        })\r\n\r\n        try { \r\n            \r\n            let res = await fetch('/login', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/JSON',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: this.state.username,\r\n                    password: this.state.password\r\n                })\r\n            });\r\n\r\n            let result = await res.json();\r\n            if (result && result.success) {\r\n                UserStore.isLoggedIn = true;\r\n                UserStore.username = result.username;\r\n            }\r\n\r\n            else if (result && result.success === false) {\r\n                this.resetForm();\r\n                alert(result.msg);\r\n            }\r\n        }\r\n            catch(e) {\r\n                console.log(e);\r\n                this.resetForm();\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <InputField\r\n                label='Username:'\r\n                type='username'\r\n                placeholder='Username'\r\n                name='username'\r\n                value={this.state.username}\r\n                onChange = {this.handleChange}\r\n                />\r\n                <InputField\r\n                label='Password:'\r\n                type='password'\r\n                placeholder='Password'\r\n                name='password'\r\n                value={this.state.password}\r\n                onChange = {this.handleChange}\r\n                />\r\n                <SubmitButton\r\n                onSubmit = {() => {this.doLogIn()}}\r\n                text = {'Log In'}\r\n                />\r\n            </div>\r\n        )};\r\n}\r\nexport default LogIn","import React, { Component } from 'react';\r\nimport '../styles/Navbar.css';\r\n\r\nclass Navbar extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<header>\r\n\t\t\t\t<h1>KACP Zoom Scheduler</h1>\r\n\t\t\t\t<nav>\r\n\t\t\t\t\t<ul className='navItems'>\r\n\t\t\t\t\t\t<li><a>Log In</a></li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</nav>\r\n\t\t\t</header>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { addDays } from 'date-fns';\r\nimport Navbar from '../components/Navbar'\r\nimport '../styles/TimePicker.css';\r\n\r\nclass TimePicker extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date(),\r\n            appointments: [\r\n                {\r\n                    date: '2020. 9. 23.',\r\n                    time: '15:30:00'\r\n                },\r\n            ]\r\n        }\r\n        //comment\r\n        this.handleConfirm = this.handleConfirm.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n    };\r\n\r\n    handleConfirm(date) {\r\n        const newDate = ((this.state.date).toLocaleDateString());\r\n        const newTime = ((this.state.date).toLocaleTimeString('en-GB'));\r\n        alert((this.state.date).toLocaleDateString());\r\n        alert((this.state.date).toLocaleTimeString('en-GB'));\r\n        const newAppointment = {\r\n            date: newDate,\r\n            time: newTime\r\n        }\r\n        const appointments = [...this.state.appointments, newAppointment]\r\n        this.setState({ appointments })\r\n        console.log(this.state.date)\r\n    }\r\n    handleChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n    handleDateChange = date => this.setState({ date });\r\n\r\n    handleTimeChange = time => this.setState({ time });\r\n\r\n    handleClick = () => alert('selected', this.state.date);\r\n\r\n    render() {\r\n        const { date, handleChange } = this.state;\r\n        return (\r\n            <div className=\"App\">\r\n                <Navbar />\r\n                <div className=\"AppointmentPicker\">\r\n                    <DatePicker\r\n                        selected={this.state.date}\r\n                        onChange={this.handleChange}\r\n                        onSelect={this.state.handleClick}\r\n                        dateFormat=\"MM/dd/yyyy HH:mm\"\r\n                        minDate={new Date()}\r\n                        maxDate={addDays(new Date(), 7)}\r\n                        timeintervals={30}\r\n                        showTimeSelect\r\n                    />\r\n                    <input className=\"DurationPicker\"\r\n                        type='number'\r\n\r\n                    />\r\n                    <button\r\n                        onClick={this.handleConfirm}>\r\n                        Confirm\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default TimePicker;","import React, { Component } from 'react';\r\nimport {observer} from 'mobx-react';\r\nimport LogIn from './pages/LogIn'\r\nimport TimePicker from './pages/TimePicker'\r\nimport UserStore from './stores/UserStore'\r\nimport './styles/LogIn.css'\r\n\r\nclass App extends Component {\r\n\r\n    async componentDidMount() {\r\n\r\n        try{\r\n\r\n            let res = await fetch ('/isLoggedIn', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application.json'\r\n                }\r\n            });\r\n\r\n            let result = await res.json();\r\n\r\n            if (result && result.success) {\r\n                UserStore.loading = false;\r\n                UserStore.isLoggedIn = true;\r\n                UserStore.username = result.username;\r\n            }\r\n\r\n            else {\r\n                UserStore.loading = false;\r\n                UserStore.isLoggedIn = false;\r\n            }\r\n        }\r\n        catch(e) {\r\n            UserStore.loading = false;\r\n            UserStore.isLoggedIn = false;\r\n        }\r\n    };\r\n    render() {\r\n        if (UserStore.isLoggedIn) {\r\n            return (\r\n                <div className=\"time-picker-page\">\r\n                    Welcome {UserStore.username}\r\n                    <TimePicker />\r\n                </div>\r\n                )}\r\n        else {\r\n            return (\r\n                <div className=\"log-in-page\">\r\n                    <LogIn />\r\n                </div>\r\n        )};\r\n    }\r\n}\r\nexport default observer(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
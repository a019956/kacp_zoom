{"version":3,"sources":["components/InputField.js","components/SubmitButton.js","stores/UserStore.js","pages/LogIn.js","components/Navbar.js","components/AppointmentCards.js","components/AppointmentList.js","pages/TimePicker.js","App.js","serviceWorker.js","index.js","components/log-in-image.png"],"names":["Inputfield","this","props","label","className","type","placeholder","name","value","size","onChange","Component","SubmitButton","text","extendObservable","loading","isLoggedIn","username","LogIn","state","password","buttonDisabled","handleChange","bind","doLogIn","handleSubmit","setState","e","target","preventDefault","alert","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","msg","console","log","onSubmit","Navbar","AppointmentCards","date","purpose","startTime","endTime","zoom_username","join_url","start_url","meeting_id","onStart","onDelete","calssName","onClick","AppointmentList","appointmentCards","map","r","index","key","id","TimePicker","today","format","Date","appointments","handleDateChange","handleTimeChange","doAppointment","deleteAppointment","timeToInt","timesToDuration","getAppointment","time","timeString","split","forEach","element","parseInt","startTimeInt","endTimeInt","durationArray","push","toLocaleDateString","toLocaleTimeString","hour","minute","second","duration","length","window","open","classNAme","selected","onSelect","handleClick","placeholderText","dateFormat","minDate","maxDate","addDays","showTimeSelect","showTimeSelectOnly","timeFormat","timeIntervals","startMeeting","App","observer","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"0OAsBeA,G,mLAjBP,OACQ,6BACI,+BACKC,KAAKC,MAAMC,OAEhB,2BACAC,UAAU,QACVC,KAAMJ,KAAKC,MAAMG,KACjBC,YAAaL,KAAKC,MAAMI,YAC7BC,KAAMN,KAAKC,MAAMK,KAClBC,MAAOP,KAAKC,MAAMM,MAClBC,KAAM,GACfC,SAAUT,KAAKC,MAAMQ,gB,GAdDC,cCWVC,G,6KATP,OACI,4BACAP,KAAO,SACPD,UAAU,iBAELH,KAAKC,MAAMW,U,GAPDF,c,OCSZ,MATX,aAAe,oBACXG,YAAiBb,KAAM,CACnBc,SAAS,EACTC,YAAY,EACZC,SAAU,MCkHPC,G,wDAhHX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IACDiB,MAAQ,CACTF,SAAU,GACVG,SAAU,GAEVC,gBAAgB,GAEpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBAVL,E,wDAaftB,KAAKyB,SAAS,CACVT,SAAU,GACVG,SAAU,O,mCAGLO,GACf1B,KAAKyB,SAAL,eAAgBC,EAAEC,OAAOrB,KAAOoB,EAAEC,OAAOpB,U,mCAG1BmB,GACTA,EAAEE,iBACyB,IAAvB5B,KAAKkB,MAAMF,SAIY,IAAvBhB,KAAKkB,MAAMC,UAKfnB,KAAKyB,SAAS,CACVL,gBAAgB,IAGpBpB,KAAKuB,WARDM,MAAM,sBAJNA,MAAM,wB,2KAmBUC,MAAM,SAAU,CAC5BC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBnB,SAAUhB,KAAKkB,MAAMF,SACrBG,SAAUnB,KAAKkB,MAAMC,a,cARzBiB,E,gBAYeA,EAAIC,O,QAAnBC,E,SACUA,EAAOC,SACjBC,EAAUxB,SAAWsB,EAAOtB,SAC5BwB,EAAUzB,YAAa,GAGlBuB,IAA6B,IAAnBA,EAAOC,UACtBvC,KAAKyC,YACLZ,MAAMS,EAAOI,M,kDAIbC,QAAQC,IAAR,MACA5C,KAAKyC,Y,+IAKb,OACI,yBAAKtC,UAAU,aAEX,0BACAA,UAAU,eACV0C,SAAU7C,KAAKwB,cAEX,kBAAC,EAAD,CACAtB,MAAM,YACNE,KAAK,WACLC,YAAY,WACZC,KAAK,WACLC,MAAOP,KAAKkB,MAAMF,SAClBP,SAAYT,KAAKqB,eAGjB,kBAAC,EAAD,CACAnB,MAAM,YACNE,KAAK,WACLC,YAAY,WACZC,KAAK,WACLC,MAAOP,KAAKkB,MAAMC,SAClBV,SAAYT,KAAKqB,eAGjB,kBAAC,EAAD,CACAT,KAAQ,YAKZ,yBAAKT,UAAU,yB,GA1GXO,cCQLoC,G,6KAXb,OACC,gCACC,mDACA,6BACC,wBAAI3C,UAAU,mB,GANEO,cC8BNqC,G,6KA5BD,IAAD,EAC2G/C,KAAKC,MAA9G+C,EADF,EACEA,KAAOC,EADT,EACSA,QAASC,EADlB,EACkBA,UAAWC,EAD7B,EAC6BA,QAASC,EADtC,EACsCA,cAAeC,EADrD,EACqDA,SAAUC,EAD/D,EAC+DA,UAAWC,EAD1E,EAC0EA,WAAYC,EADtF,EACsFA,QAASC,EAD/F,EAC+FA,SACpG,OACQ,yBAAKtD,UAAU,oBACX,yBAAKA,UAAU,4BACf,wBAAIuD,UAAU,gBAAgBV,EAA9B,gBAAiDC,GACjD,wBAAI9C,UAAU,YAAd,QAA+B+C,EAA/B,OAA8CC,IAE9C,yBAAKhD,UAAU,6BACX,wBAAIA,UAAU,iBAAiBiD,GAC/B,wBAAIjD,UAAU,YAAYkD,GAC1B,4BACAlD,UAAU,eACVwD,QAAW,kBAAMH,EAAQF,KAFzB,iBAMA,4BACAnD,UAAU,gBACVwD,QAAW,kBAAMF,EAASF,KAF1B,wB,GAnBO7C,cCwBhBkD,E,uKAtBD,IAAD,EACuB5D,KAAKC,MAA1BuD,EADF,EACEA,QAASC,EADX,EACWA,SACVI,EAAmB7D,KAAKC,MAAM4D,iBAAiBC,KAAI,SAACC,EAAGC,GAAJ,OACrD,kBAAC,EAAD,eAAkBC,IAAOF,EAAEG,IAAQH,EAAnC,CAAsCP,QAASA,EAASC,SAAUA,QAEtE,OAAII,IAAqB,GAErB,yBAAK1D,UAAY,0BAAjB,uCAOA,yBAAKA,UAAY,oBACZ0D,O,GAjBanD,a,0CCkSfyD,G,wDA1RX,WAAYlE,GAAQ,IAAD,8BACf,cAAMA,IAEDiB,MAAQ,CACTkD,MAAOC,kBAAO,IAAIC,KAAQ,cAC1BtD,SAAU,GACVgC,KAAM,GACNE,UAAW,GACXC,QAAS,GACTF,QAAS,GACT7B,gBAAgB,EAChBmD,aAAc,IAElB,EAAKlD,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKkD,iBAAmB,EAAKA,iBAAiBlD,KAAtB,gBACxB,EAAKmD,iBAAmB,EAAKA,iBAAiBnD,KAAtB,gBACxB,EAAKoD,cAAgB,EAAKA,cAAcpD,KAAnB,gBACrB,EAAKqD,kBAAoB,EAAKA,kBAAkBrD,KAAvB,gBACzB,EAAKsD,UAAY,EAAKA,UAAUtD,KAAf,gBACjB,EAAKuD,gBAAkB,EAAKA,gBAAgBvD,KAArB,gBACvB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBApBL,E,gEAwBf,IAAMN,EAAWwB,EAAUxB,SAC3BhB,KAAKyB,SAAS,CAACT,aACf2B,QAAQC,IAAI5B,GACZhB,KAAK8E,mB,mCAGIpD,GACf1B,KAAKyB,SAAL,eAAgBC,EAAEC,OAAOrB,KAAOoB,EAAEC,OAAOpB,U,uCAGtByC,EAAM1C,GACnBN,KAAKyB,SAAL,eAAgBnB,EAAO0C,M,uCAGVzC,EAAOD,GACpBN,KAAKyB,SAAL,eAAgBnB,EAAOC,M,gCAIjBwE,GACN,IAAIC,EAAa,GAKjB,OAJAD,EAAKE,MAAM,KAAKC,SAAQ,SAACC,GACrBH,GAAcG,KAEJC,SAASJ,K,sCAIXK,EAAcC,GAE1B,IADA,IAAIC,EAAgB,GACdF,GAAgBC,GAClBC,EAAcC,KAAKH,GAEfA,GADAA,EAAa,MAAU,EACP,IAGA,IAGxB,OAAOE,I,sKAKDvE,EAAWwB,EAAUxB,SACrBoD,EAAQC,kBAAO,IAAIC,KAAQ,c,kBAIbxC,MAAO,kBAAmB,CACtCC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBnB,SAAUA,EACVoD,MAAOA,M,cARXhC,E,gBAYeA,EAAIC,O,OAAnBC,E,OAEEiC,EAAejC,EAAOiC,aAC5BvE,KAAKyB,SAAS,CAAC8C,iB,kDAIf/B,EAAU1B,SAAU,EACpB0B,EAAUzB,YAAa,E,+RAOrBqD,EAAQC,kBAAO,IAAIC,KAAQ,cAC3BtD,EAAWhB,KAAKkB,MAAMF,SACtBgC,EAAOhD,KAAKkB,MAAM8B,KAAKyC,mBAAmB,SAC1CvC,EAAYlD,KAAKkB,MAAMgC,UAAUwC,mBAAmB,QAAS,CAACC,KAAM,UAAWC,OAAQ,UAAWC,OAAQ,YAC1G1C,EAAUnD,KAAKkB,MAAMiC,QAAQuC,mBAAmB,QAAS,CAACC,KAAM,UAAWC,OAAQ,UAAWC,OAAQ,YACtG5C,EAAUjD,KAAKkB,MAAM+B,QAEvBoC,EAAerF,KAAK4E,UAAU1B,GAC9BoC,EAAatF,KAAK4E,UAAUzB,KAG5BnD,KAAKkB,MAAM8B,KAAOoB,GAASiB,EAAeC,G,wBAC1CzD,MAAM,iB,kCAIV7B,KAAKyB,SAAS,CACVL,gBAAgB,IAIhBmE,EAAgBvF,KAAK6E,gBAAgBQ,EAAcC,GAGnDQ,EAAwC,IAA5BP,EAAcQ,OAAS,G,oBAEnBjE,MAAM,iBAAkB,CACpCC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBnB,SAAUA,EACVgC,KAAMA,EACN8C,SAAUA,EACVP,cAAeA,EACftC,QAASA,EACTC,UAAWA,EACXC,QAASA,M,eAbbf,E,iBAkBeA,EAAIC,O,UAAnBC,E,SACUA,EAAOC,SAIZD,IAA6B,IAAnBA,EAAOC,UAHtBV,MAAMS,EAAOI,K,mDAQjBC,QAAQC,IAAR,M,QAEJ5C,KAAK8E,iB,oJAGIpD,GACTA,EAAEE,iBAEsB,KAApB5B,KAAKkB,MAAM8B,MACc,KAAzBhD,KAAKkB,MAAMgC,WACY,KAAvBlD,KAAKkB,MAAMiC,SACY,KAAvBnD,KAAKkB,MAAM+B,QAIfjD,KAAK0E,gBAHD7C,MAAM,iC,mCAMDyB,GACT0C,OAAOC,KAAK3C,K,iFAGQC,G,kFACdW,EAAKX,E,kBAGSzB,MAAM,qBAAsB,CACxCC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjB+B,GAAIA,M,cAPR9B,E,gBAWeA,EAAIC,O,SAAnBC,E,SACUA,EAAOC,SAIZD,IAA6B,IAAnBA,EAAOC,UAHtBV,MAAMS,EAAOI,K,kDAQjBC,QAAQC,IAAR,M,QAEJ5C,KAAK8E,iB,gJAIC,IAAD,SACgC9E,KAAKkB,MAAlC8B,EADH,EACGA,KAAME,EADT,EACSA,UAAWC,EADpB,EACoBA,QACzB,OACI,yBAAKhD,UAAY,wBACb,0BAAMA,UAAU,oBAChB0C,SAAU7C,KAAKwB,cACX,wBAAIrB,UAAY,WAAhB,UAAkCqC,EAAUxB,UAC5C,wBAAIkF,UAAY,SAAhB,aAAmClG,KAAKkB,MAAMkD,OAC9C,kBAAC,IAAD,CACIjE,UAAY,cACZG,KAAK,OACL6F,SAAUnD,EACVvC,SAAU,SAACuC,GAAD,OAAU,EAAKwB,iBAAiBxB,EAAM,SAChDoD,SAAUpG,KAAKqG,YACfC,gBAAgB,cAChBC,WAAW,aACXC,QAAU,IAAIlC,KACdmC,QAASC,kBAAQ,IAAIpC,KAAQ,KAEjC,kBAAC,IAAD,CACInE,UAAY,oBACZG,KAAK,YACL6F,SAAUjD,EACVzC,SAAU,SAACyC,GAAD,OAAe,EAAKsB,iBAAiBtB,EAAW,cAC1DkD,SAAUpG,KAAKqG,YACfC,gBAAgB,uBAChBK,gBAAc,EACdC,oBAAkB,EAClBC,WAAW,QACXC,cAAe,GACfP,WAAW,YAGf,kBAAC,IAAD,CACIpG,UAAY,kBACZG,KAAK,UACL6F,SAAUhD,EACV1C,SAAU,SAAC0C,GAAD,OAAa,EAAKqB,iBAAiBrB,EAAS,YACtDiD,SAAUpG,KAAKqG,YACfC,gBAAgB,qBAChBK,gBAAc,EACdC,oBAAkB,EAClBC,WAAW,QACXC,cAAe,GACfP,WAAW,YAGf,kBAAC,EAAD,CACApG,UAAU,gBACNC,KAAK,OACLE,KAAK,UACLD,YAAY,UACZE,MAASP,KAAKkB,MAAM+B,QACpBxC,SAAUT,KAAKqB,eAEnB,kBAAC,EAAD,CACIT,KAAK,aAIb,yBAAKT,UAAY,sBACb,yBACAA,UAAU,cACVC,KAAK,SACL,kBAAC,EAAD,CACIyD,iBAAoB7D,KAAKkB,MAAMqD,aAC/Bf,QAASxD,KAAK+G,aACdtD,SAAUzD,KAAK2E,0B,GAnRdjE,cCFnBsG,E,kDAEF,WAAY/G,GAAQ,IAAD,8BACf,cAAMA,IAEDiB,MAAQ,CACTF,SAAU,YAJC,E,2MAWKc,MAAO,cAAe,CAClCC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,sB,cAJpBI,E,gBAQeA,EAAIC,O,QAAnBC,E,SAEUA,EAAOC,SACjBC,EAAU1B,SAAU,EACpB0B,EAAUzB,YAAa,IAIvByB,EAAU1B,SAAU,EACpB0B,EAAUzB,YAAa,G,kDAK3ByB,EAAU1B,SAAU,EACpB0B,EAAUzB,YAAa,E,+IAM3B,OAAIyB,EAAUzB,WAEN,yBAAKZ,UAAU,oBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,OAKJ,yBAAKA,UAAU,eACX,kBAAC,EAAD,W,GApDFO,aAyDHuG,cAASD,GCrDJE,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,6BACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtF,QAAQsF,MAAMA,EAAMC,a,4IEzI5BC,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.1349373e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/InputField.css'\r\n\r\nclass Inputfield extends Component {\r\n    render() {\r\n        return (\r\n                <div>\r\n                    <label>\r\n                        {this.props.label}\r\n                    </label>\r\n                    <input\r\n                    className='input'\r\n                    type={this.props.type}\r\n                    placeholder={this.props.placeholder}\r\n             \t\tname={this.props.name}\r\n            \t\tvalue={this.props.value}\r\n            \t\tsize={15}\r\n\t\t\t\t\tonChange={this.props.onChange} />\r\n                </div>\r\n        );\r\n    }\r\n}\r\nexport default Inputfield","import React, { Component } from 'react';\r\nimport '../styles/SubmitButton.css'\r\n\r\nclass SubmitButton extends Component {\r\n    render() {\r\n        return (\r\n            <button \r\n            type = 'submit'\r\n            className='log-in-button'\r\n            >\r\n                {this.props.text}\r\n            </button>\r\n        )};\r\n}\r\nexport default SubmitButton","import {extendObservable} from 'mobx';\r\n\r\nclass UserStore{\r\n    constructor() {\r\n        extendObservable(this, {\r\n            loading: true,\r\n            isLoggedIn: false,\r\n            username: ''\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();","import React, { Component } from 'react';\r\nimport '../styles/LogIn.css'\r\nimport InputField from '../components/InputField'\r\nimport SubmitButton from '../components/SubmitButton'\r\nimport UserStore from '../stores/UserStore';\r\nimport log_in_image from '../components/log-in-image.png'\r\n\r\n\r\nclass LogIn extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            //to prevent logging in twice\r\n            buttonDisabled: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.doLogIn = this.doLogIn.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    };\r\n    resetForm() {\r\n        this.setState({\r\n            username: '',\r\n            password: ''\r\n        })\r\n    }\r\n    handleChange(e) {\r\n\t\tthis.setState({[e.target.name]: e.target.value});\r\n\t}\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (this.state.username == '') {\r\n            alert('username is empty.')\r\n            return;\r\n        }\r\n        if (this.state.password == '') {\r\n            alert('password is empty.')\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            buttonDisabled: true\r\n        })\r\n\r\n        this.doLogIn()\r\n    }\r\n\r\n    async doLogIn() {\r\n\r\n        try { \r\n\r\n            let res = await fetch('/login', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/JSON',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: this.state.username,\r\n                    password: this.state.password\r\n                })\r\n            });\r\n\r\n            let result = await res.json();\r\n            if (result && result.success) {\r\n                UserStore.username = result.username;\r\n                UserStore.isLoggedIn = true;\r\n            }\r\n\r\n            else if (result && result.success === false) {\r\n                this.resetForm();\r\n                alert(result.msg);\r\n            }\r\n        }\r\n            catch(e) {\r\n                console.log(e);\r\n                this.resetForm();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n\r\n                <form \r\n                className=\"input-fields\"\r\n                onSubmit={this.handleSubmit}>\r\n\r\n                    <InputField\r\n                    label='Username:'\r\n                    type='username'\r\n                    placeholder='Username'\r\n                    name='username'\r\n                    value={this.state.username}\r\n                    onChange = {this.handleChange}\r\n                    />\r\n\r\n                    <InputField\r\n                    label='Password:'\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    name='password'\r\n                    value={this.state.password}\r\n                    onChange = {this.handleChange}\r\n                    />\r\n\r\n                    <SubmitButton\r\n                    text = {'Log In'}\r\n                    />\r\n\r\n                </form>\r\n\r\n                <div className=\"account-request\">\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )};\r\n}\r\nexport default LogIn","import React, { Component } from 'react';\r\nimport '../styles/Navbar.css';\r\n\r\nclass Navbar extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<header>\r\n\t\t\t\t<h1>KACP Zoom Scheduler</h1>\r\n\t\t\t\t<nav>\r\n\t\t\t\t\t<ul className='navItems'>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</nav>\r\n\t\t\t</header>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Navbar;","import React, {Component} from 'react';\r\nimport '../styles/AppointmentCards.css'\r\n\r\nclass AppointmentCards extends Component {\r\n\r\n    render() {\r\n        const {date,  purpose, startTime, endTime, zoom_username, join_url, start_url, meeting_id, onStart, onDelete} = this.props;\r\n        return (\r\n                <div className=\"appointment-card\">\r\n                    <div className=\"appointment-content-left\">\r\n                    <h3 calssName=\"date-purpose\">{date} meeting for {purpose}</h3>\r\n                    <h3 className=\"duration\">From {startTime} to {endTime}</h3>\r\n                </div>    \r\n                    <div className=\"appointment-content-right\">\r\n                        <h3 className=\"zoom-username\">{zoom_username}</h3>\r\n                        <h3 className=\"join-url\">{join_url}</h3>\r\n                        <button\r\n                        className=\"start-button\"\r\n                        onClick = {() => onStart(start_url)}\r\n                        >\r\n                            Start Meeting\r\n                        </button>\r\n                        <button\r\n                        className=\"delete-button\"\r\n                        onClick = {() => onDelete(meeting_id)}\r\n                        >\r\n                            Delete Meeting\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\nexport default AppointmentCards;","import React, {Component} from 'react';\r\nimport AppointmentCards from './AppointmentCards';\r\n\r\nclass AppointmentList extends Component {\r\n\r\n    render() {\r\n        const {onStart, onDelete} = this.props;\r\n        const appointmentCards = this.props.appointmentCards.map((r, index) => (\r\n            <AppointmentCards key = {r.id} {...r} onStart={onStart} onDelete={onDelete} />\r\n        ));\r\n        if (appointmentCards === [] ) {\r\n        return (\r\n            <div className = 'empty-appointment-list'>\r\n                currently no appointments are made.\r\n            </div>\r\n        )\r\n        }\r\n        else {\r\n            return (\r\n            <div className = 'appointment-list'>\r\n                {appointmentCards}\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default AppointmentList;","import React, { Component } from 'react';\r\nimport InputField from '../components/InputField'\r\nimport SubmitButton from '../components/SubmitButton'\r\nimport AppointmentList from '../components/AppointmentList'\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { addDays , format } from 'date-fns';\r\nimport UserStore from '../stores/UserStore'\r\nimport '../styles/TimePicker.css';\r\n\r\nclass TimePicker extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            today: format(new Date(), 'yyyy-MM-dd'),\r\n            username: '',\r\n            date: '',\r\n            startTime: '',\r\n            endTime: '',\r\n            purpose: '',\r\n            buttonDisabled: false,\r\n            appointments: [],\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n        this.handleTimeChange = this.handleTimeChange.bind(this);\r\n        this.doAppointment = this.doAppointment.bind(this);\r\n        this.deleteAppointment = this.deleteAppointment.bind(this);\r\n        this.timeToInt = this.timeToInt.bind(this);\r\n        this.timesToDuration = this.timesToDuration.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    };\r\n\r\n    componentDidMount() {\r\n        const username = UserStore.username\r\n        this.setState({username});\r\n        console.log(username);\r\n        this.getAppointment();\r\n    }\r\n\r\n    handleChange(e) {\r\n\t\tthis.setState({[e.target.name]: e.target.value});\r\n\t}\r\n\r\n    handleDateChange(date, name) {\r\n        this.setState({[name]: date});\r\n    }\r\n\r\n    handleTimeChange(value, name) {\r\n        this.setState({[name]: value});\r\n    }\r\n\r\n    //function to change time string to 4 digit integer value for calculations\r\n    timeToInt(time) {\r\n        let timeString = ''\r\n        time.split(\":\").forEach((element) => {\r\n            timeString += element;\r\n        });\r\n        var timeInt = parseInt(timeString)\r\n        return timeInt;\r\n    }\r\n\r\n    timesToDuration(startTimeInt, endTimeInt) {\r\n        var durationArray = [];\r\n        while(startTimeInt <= endTimeInt) {\r\n            durationArray.push(startTimeInt);\r\n            if (startTimeInt%10000 === 0) {\r\n                startTimeInt += 3000\r\n            }\r\n            else {\r\n                startTimeInt += 7000\r\n            }\r\n        }\r\n        return durationArray;\r\n    }\r\n    \r\n    //when page loads, check appointments that are under the current username\r\n    async getAppointment() {\r\n        const username = UserStore.username;\r\n        const today = format(new Date(), 'yyyy-MM-dd')\r\n\r\n        try{\r\n    \r\n            let res = await fetch ('/getAppointment', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/JSON',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: username,\r\n                    today: today,\r\n                })\r\n            });\r\n\r\n            let result = await res.json();\r\n\r\n            const appointments = result.appointments;\r\n            this.setState({appointments})\r\n        }\r\n\r\n        catch(e) {\r\n            UserStore.loading = false;\r\n            UserStore.isLoggedIn = false;\r\n        }\r\n\r\n    };\r\n\r\n    //create appointment based on infromation given by the user\r\n    async doAppointment() {\r\n        const today = format(new Date(), 'yyyy-MM-dd')\r\n        const username = this.state.username;\r\n        const date = this.state.date.toLocaleDateString(\"fr-CA\");\r\n        const startTime = this.state.startTime.toLocaleTimeString(\"en-GB\", {hour: '2-digit', minute: '2-digit', second: '2-digit'});\r\n        const endTime = this.state.endTime.toLocaleTimeString(\"en-GB\", {hour: '2-digit', minute: '2-digit', second: '2-digit'});\r\n        const purpose = this.state.purpose;\r\n\r\n        var startTimeInt = this.timeToInt(startTime);\r\n        var endTimeInt = this.timeToInt(endTime);\r\n\r\n        //if the date passes 12:00 don't allow appointment.\r\n        if (this.state.date < today || startTimeInt > endTimeInt){\r\n            alert('Invalid time.')\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            buttonDisabled: true\r\n        })\r\n\r\n        //make duration into duration array with 30 minute increments.\r\n        var durationArray = this.timesToDuration(startTimeInt, endTimeInt)\r\n        //duration in minutes\r\n\r\n        var duration = (durationArray.length - 1) * 30\r\n        try { \r\n            let res = await fetch('/doAppointment', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/JSON',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: username,\r\n                    date: date,\r\n                    duration: duration,\r\n                    durationArray: durationArray,\r\n                    purpose: purpose,\r\n                    startTime: startTime,\r\n                    endTime: endTime,\r\n\r\n                })\r\n            });\r\n            \r\n            let result = await res.json();\r\n            if (result && result.success) {\r\n                alert(result.msg);\r\n            }\r\n\r\n            else if (result && result.success === false) {\r\n                alert(result.msg);\r\n            }\r\n        }\r\n        catch(e) {\r\n            console.log(e);\r\n        }\r\n        this.getAppointment()\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (\r\n            this.state.date === '' || \r\n            this.state.startTime === '' || \r\n            this.state.endTime === '' || \r\n            this.state.purpose === ''){\r\n            alert('Please fill out all fields.')\r\n            return;\r\n        }\r\n        this.doAppointment()\r\n    }\r\n\r\n    startMeeting(start_url) {\r\n        window.open(start_url)\r\n    }\r\n\r\n    async deleteAppointment(meeting_id) {\r\n        const id = meeting_id\r\n\r\n        try { \r\n            let res = await fetch('/deleteAppointment', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/JSON',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    id: id\r\n                })\r\n            });\r\n            \r\n            let result = await res.json();\r\n            if (result && result.success) {\r\n                alert(result.msg);\r\n            }\r\n\r\n            else if (result && result.success === false) {\r\n                alert(result.msg);\r\n            }\r\n        }\r\n        catch(e) {\r\n            console.log(e);\r\n        }\r\n        this.getAppointment()\r\n    }\r\n\r\n    //when page loads, get appointments under the username.\r\n    render() {\r\n        const { date, startTime, endTime } = this.state;\r\n        return (\r\n            <div className = \"AppointmentContainer\">\r\n                <form className=\"AppointmentPicker\"\r\n                onSubmit={this.handleSubmit}>\r\n                    <h3 className = 'welcome'>Hello, {UserStore.username}</h3>\r\n                    <h4 classNAme = 'today'>Today is: {this.state.today}</h4>\r\n                    <DatePicker\r\n                        className = \"date-picker\"\r\n                        name=\"date\"\r\n                        selected={date}\r\n                        onChange={(date) => this.handleDateChange(date, \"date\")}\r\n                        onSelect={this.handleClick}\r\n                        placeholderText=\"Select Date\"\r\n                        dateFormat=\"yyyy-MM-dd\"\r\n                        minDate= {new Date()}\r\n                        maxDate={addDays(new Date(), 8)}\r\n                    />\r\n                    <DatePicker\r\n                        className = \"start-time-picker\"\r\n                        name=\"startTime\"\r\n                        selected={startTime}\r\n                        onChange={(startTime) => this.handleDateChange(startTime, \"startTime\")}\r\n                        onSelect={this.handleClick}\r\n                        placeholderText=\"Select Starting Time\"\r\n                        showTimeSelect\r\n                        showTimeSelectOnly\r\n                        timeFormat=\"HH:mm\"\r\n                        timeIntervals={30}\r\n                        dateFormat=\"h:mm aa\"\r\n                    />\r\n\r\n                    <DatePicker\r\n                        className = \"end-time-picker\"\r\n                        name=\"endTime\"\r\n                        selected={endTime}\r\n                        onChange={(endTime) => this.handleDateChange(endTime, \"endTime\")}\r\n                        onSelect={this.handleClick}\r\n                        placeholderText=\"Select Ending Time\"\r\n                        showTimeSelect\r\n                        showTimeSelectOnly\r\n                        timeFormat=\"HH:mm\"\r\n                        timeIntervals={30}\r\n                        dateFormat=\"h:mm aa\"\r\n                    />\r\n\r\n                    <InputField \r\n                    className=\"PurposePicker\"\r\n                        type=\"text\"\r\n                        name=\"purpose\"\r\n                        placeholder=\"Purpose\"\r\n                        value = {this.state.purpose}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <SubmitButton\r\n                        text='Confirm'\r\n                    />\r\n                </form>\r\n\r\n                <div className = \"AppointmentChecker\" >\r\n                    <div\r\n                    className=\"explanation\"\r\n                    type=\"text\"></div>\r\n                    <AppointmentList\r\n                        appointmentCards = {this.state.appointments}\r\n                        onStart={this.startMeeting}\r\n                        onDelete={this.deleteAppointment}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TimePicker;","import React, { Component } from 'react';\r\nimport {observer} from 'mobx-react';\r\nimport LogIn from './pages/LogIn'\r\nimport Navbar from './components/Navbar'\r\nimport TimePicker from './pages/TimePicker'\r\nimport UserStore from './stores/UserStore'\r\nimport './styles/LogIn.css'\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            username: 'username',\r\n        }\r\n    };\r\n\r\n\r\n    async componentDidMount() {\r\n        try{\r\n            let res = await fetch ('/isLoggedIn', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application.json'\r\n                }\r\n            });\r\n\r\n            let result = await res.json();\r\n\r\n            if (result && result.success) {\r\n                UserStore.loading = false;\r\n                UserStore.isLoggedIn = true;\r\n            }\r\n\r\n            else {\r\n                UserStore.loading = false;\r\n                UserStore.isLoggedIn = false;\r\n            }\r\n        }\r\n\r\n        catch(e) {\r\n            UserStore.loading = false;\r\n            UserStore.isLoggedIn = false;\r\n        }\r\n    };\r\n\r\n    render() {\r\n        \r\n        if (UserStore.isLoggedIn) {\r\n            return (\r\n                <div className=\"time-picker-page\">\r\n                    <Navbar />\r\n                    <TimePicker/>\r\n                </div>\r\n                )}\r\n        else {\r\n            return (\r\n                <div className=\"log-in-page\">\r\n                    <LogIn />\r\n                </div>\r\n        )};\r\n    }\r\n}\r\nexport default observer(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <App />\r\n  </div>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/log-in-image.8285a10e.png\";"],"sourceRoot":""}
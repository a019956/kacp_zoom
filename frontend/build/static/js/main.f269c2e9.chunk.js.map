{"version":3,"sources":["components/InputField.js","components/SubmitButton.js","stores/UserStore.js","pages/LogIn.js","components/Navbar.js","components/AppointmentCards.js","components/AppointmentList.js","pages/TimePicker.js","App.js","serviceWorker.js","index.js","components/log-in-image.png"],"names":["Inputfield","className","onSubmit","this","props","label","type","placeholder","name","value","size","onChange","Component","SubmitButton","onClick","text","extendObservable","loading","isLoggedIn","username","LogIn","state","password","buttonDisabled","handleChange","bind","handleLogIn","doLogIn","setState","e","target","console","log","resetForm","alert","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","msg","Navbar","AppointmentCards","date","purpose","time","startTime","endTime","zoom_username","meetingID","calssName","AppointmentList","appointmentCards","map","r","index","key","id","TimePicker","appointments","handleDateChange","handleTimeChange","doAppointment","timeToInt","timesToDuration","timeString","split","forEach","element","parseInt","startTimeInt","endTimeInt","duration","push","email","meetingUrl","toLocaleDateString","toLocaleTimeString","hour","minute","selected","onSelect","handleClick","placeholderText","dateFormat","minDate","addDays","Date","maxDate","showTimeSelect","showTimeSelectOnly","timeFormat","timeIntervals","componentDidMount","getZoomMeeting","App","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"0OAuBeA,G,6KAlBP,OACQ,0BAAMC,UAAU,aAChBC,SAAYC,KAAKC,MAAMF,UACnB,+BACKC,KAAKC,MAAMC,OAEhB,2BACAJ,UAAU,QACVK,KAAMH,KAAKC,MAAME,KACjBC,YAAaJ,KAAKC,MAAMG,YAC7BC,KAAML,KAAKC,MAAMI,KAClBC,MAAON,KAAKC,MAAMK,MAClBC,KAAM,GACfC,SAAUR,KAAKC,MAAMO,gB,GAfDC,cCWVC,G,6KATP,OACI,4BACAZ,UAAU,gBACVK,KAAO,SACPQ,QAAWX,KAAKC,MAAMF,UACjBC,KAAKC,MAAMW,U,GAPDH,c,OCSZ,MATX,aAAe,oBACXI,YAAiBb,KAAM,CACnBc,SAAS,EACTC,YAAY,EACZC,SAAU,MC0GPC,G,8DAzGX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IACDiB,MAAQ,CACTF,SAAU,GACVG,SAAU,GAEVC,gBAAgB,GAEpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBAVA,E,wDAaftB,KAAKyB,SAAS,CACVT,SAAU,GACVG,SAAU,O,mCAGLO,GACf1B,KAAKyB,SAAL,eAAgBC,EAAEC,OAAOtB,KAAOqB,EAAEC,OAAOrB,U,kCAE3BoB,GACRE,QAAQC,IAAI7B,KAAKkB,MAAMF,UACvBY,QAAQC,IAAI7B,KAAKkB,MAAMC,UACvBnB,KAAK8B,c,qJAKsB,IAAvB9B,KAAKkB,MAAMF,S,uBACXe,MAAM,sB,6BAGiB,IAAvB/B,KAAKkB,MAAMC,S,uBACXY,MAAM,sB,iCAIV/B,KAAKyB,SAAS,CACVL,gBAAgB,I,mBAKAY,MAAM,SAAU,CAC5BC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBrB,SAAUhB,KAAKkB,MAAMF,SACrBG,SAAUnB,KAAKkB,MAAMC,a,eARzBmB,E,iBAYeA,EAAIC,O,SAAnBC,E,SACUA,EAAOC,SACjBC,EAAU3B,YAAa,EACvB2B,EAAU1B,SAAWwB,EAAOxB,UAGvBwB,IAA6B,IAAnBA,EAAOC,UACtBzC,KAAK8B,YACLC,MAAMS,EAAOG,M,kDAIbf,QAAQC,IAAR,MACA7B,KAAK8B,Y,+IAIP,IAAD,OACL,OACI,yBAAKhC,UAAU,mBAGX,kBAAC,EAAD,CACAI,MAAM,YACNC,KAAK,WACLC,YAAY,WACZC,KAAK,WACLC,MAAON,KAAKkB,MAAMF,SAClBR,SAAYR,KAAKqB,aACjBtB,SAAY,WAAO,EAAKyB,aAGxB,kBAAC,EAAD,CACAtB,MAAM,YACNC,KAAK,WACLC,YAAY,WACZC,KAAK,WACLC,MAAON,KAAKkB,MAAMC,SAClBX,SAAYR,KAAKqB,aACjBtB,SAAY,WAAO,EAAKyB,aAGxB,kBAAC,EAAD,CACAzB,SAAY,WAAO,EAAKyB,WACxBZ,KAAQ,gB,GArGJH,cCULmC,G,6KAZb,OACC,gCACC,mDACA,6BACC,wBAAI9C,UAAU,YACb,4BAAI,6C,GAPWW,cCkBNoC,G,6KAhBD,IAAD,EACuE7C,KAAKC,MAA1E6C,EADF,EACEA,KAAYC,GADd,EACQC,KADR,EACcD,SAASE,EADvB,EACuBA,UAAWC,EADlC,EACkCA,QAASC,EAD3C,EAC2CA,cAD3C,EAC0DC,UAC/D,OACQ,yBAAKtD,UAAU,oBACX,yBAAKA,UAAU,uBACX,wBAAIuD,UAAU,QAAd,SAA4BP,GAC5B,wBAAIhD,UAAU,aAAd,WAAmCmD,GACnC,wBAAInD,UAAU,WAAd,SAA+BoD,GAC/B,wBAAIpD,UAAU,WAAWiD,GACzB,wBAAIjD,UAAU,iBAAiBqD,S,GAXxB1C,cCuBhB6C,E,uKApBP,IAAMC,EAAmBvD,KAAKC,MAAMsD,iBAAiBC,KAAI,SAACC,EAAGC,GAAJ,OACrD,kBAAC,EAAD,eAAkBC,IAAOF,EAAEG,IAAQH,OAEvC,OAAIF,IAAqB,GAErB,yBAAKzD,UAAY,0BAAjB,uCAOA,yBAAKA,UAAY,oBACZyD,O,GAhBa9C,a,iCCkQfoD,G,wDAxPX,WAAY5D,GAAQ,IAAD,8BACf,cAAMA,IAEDiB,MAAQ,CACTF,SAAU,GACV8B,KAAM,GACNG,UAAW,GACXC,QAAS,GACTH,QAAS,GACT3B,gBAAgB,EAChB0C,aAAc,IAElB,EAAKzC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKyC,iBAAmB,EAAKA,iBAAiBzC,KAAtB,gBACxB,EAAK0C,iBAAmB,EAAKA,iBAAiB1C,KAAtB,gBACxB,EAAK2C,cAAgB,EAAKA,cAAc3C,KAAnB,gBACrB,EAAK4C,UAAY,EAAKA,UAAU5C,KAAf,gBACjB,EAAK6C,gBAAkB,EAAKA,gBAAgB7C,KAArB,gBAjBR,E,yDAoBNI,GACf1B,KAAKyB,SAAL,eAAgBC,EAAEC,OAAOtB,KAAOqB,EAAEC,OAAOrB,U,uCAGtBwC,EAAMzC,GACnBL,KAAKyB,SAAL,eAAgBpB,EAAOyC,M,uCAGVxC,EAAOD,GACpBL,KAAKyB,SAAL,eAAgBpB,EAAOC,M,gCAGjB0C,GACN,IAAIoB,EAAa,GAKjB,OAJApB,EAAKqB,MAAM,KAAKC,SAAQ,SAACC,GACrBH,GAAcG,KAEJC,SAASJ,K,sCAIXK,EAAcC,GAE1B,IADA,IAAIC,EAAW,GACTF,GAAgBC,GAClBC,EAASC,KAAKH,GAEVA,GADAA,EAAa,MAAQ,EACL,GAGA,GAGxB,OAAOE,I,uKAKD3D,EAAW0B,EAAU1B,SAC3BY,QAAQC,IAAI,qBAAuBb,G,kBAIfgB,MAAO,kBAAmB,CACtCC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBrB,SAAUA,M,cAPdsB,E,gBAWeA,EAAIC,O,OAAnBC,E,OAEEsB,EAAetB,EAAOsB,aAC5B9D,KAAKyB,SAAS,CAACqC,iB,kDAIfpB,EAAU5B,SAAU,EACpB4B,EAAU3B,YAAa,E,oSAOPiB,MAAO,kBAAmB,CACtCC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBwC,MAAO,sB,cAPXvC,E,gBAUeA,EAAIC,O,OAAnBC,E,OACEsC,EAAatC,EAAOsC,WAC1BlD,QAAQC,IAAIiD,G,kDAIZlD,QAAQC,IAAR,M,2RAMoB,KAApB7B,KAAKkB,MAAM4B,MACc,KAAzB9C,KAAKkB,MAAM+B,WACY,KAAvBjD,KAAKkB,MAAMgC,SACY,KAAvBlD,KAAKkB,MAAM6B,Q,uBACXhB,MAAM,+B,6BAIJf,EAAW0B,EAAU1B,SACrB8B,EAAO9C,KAAKkB,MAAM4B,KAAKiC,mBAAmB,SAC1C9B,EAAYjD,KAAKkB,MAAM+B,UAAU+B,mBAAmB,QAAS,CAACC,KAAM,UAAWC,OAAQ,YACvFhC,EAAUlD,KAAKkB,MAAMgC,QAAQ8B,mBAAmB,QAAS,CAACC,KAAM,UAAWC,OAAQ,YACnFnC,EAAU/C,KAAKkB,MAAM6B,QAEvB0B,EAAezE,KAAKkE,UAAUjB,GAC9ByB,EAAa1E,KAAKkE,UAAUhB,GAChCtB,QAAQC,IAAI6C,KAGR1E,KAAKkB,MAAM4B,KAAO9C,KAAKkB,MAAM+B,WAAawB,EAAeC,G,wBACzD3C,MAAM,iB,kCAIV/B,KAAKyB,SAAS,CACVL,gBAAgB,IAIhBuD,EAAW3E,KAAKmE,gBAAgBM,EAAcC,G,oBAE9B1C,MAAM,eAAgB,CAClCC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBrB,SAAUA,EACV8B,KAAMA,EACN6B,SAAUA,EACV5B,QAASA,EACTE,UAAWA,EACXC,QAASA,M,eAZbZ,E,iBAgBeA,EAAIC,O,UAAnBC,E,SACUA,EAAOC,SAIZD,IAA6B,IAAnBA,EAAOC,UAHtBV,MAAMS,EAAOG,K,mDAQjBf,QAAQC,IAAR,M,gJAIE,IAAD,SACgC7B,KAAKkB,MAAlC4B,EADH,EACGA,KAAMG,EADT,EACSA,UAAWC,EADpB,EACoBA,QACzB,OACI,yBAAKpD,UAAY,yBACb,yBAAKA,UAAU,qBACX,wBAAIA,UAAY,WAAW4C,EAAU1B,UACrC,kBAAC,IAAD,CACIlB,UAAY,cACZO,KAAK,OACL8E,SAAUrC,EACVtC,SAAU,SAACsC,GAAD,OAAU,EAAKiB,iBAAiBjB,EAAM,SAChDsC,SAAUpF,KAAKqF,YACfC,gBAAgB,cAChBC,WAAW,aACXC,QAASC,kBAAQ,IAAIC,KAAQ,GAC7BC,QAASF,kBAAQ,IAAIC,KAAQ,KAEjC,kBAAC,IAAD,CACI5F,UAAY,oBACZO,KAAK,YACL8E,SAAUlC,EACVzC,SAAU,SAACyC,GAAD,OAAe,EAAKc,iBAAiBd,EAAW,cAC1DmC,SAAUpF,KAAKqF,YACfC,gBAAgB,uBAChBM,gBAAc,EACdC,oBAAkB,EAClBC,WAAW,QACXC,cAAe,GACfR,WAAW,YAGf,kBAAC,IAAD,CACIzF,UAAY,kBACZO,KAAK,UACL8E,SAAUjC,EACV1C,SAAU,SAAC0C,GAAD,OAAa,EAAKa,iBAAiBb,EAAS,YACtDkC,SAAUpF,KAAKqF,YACfC,gBAAgB,qBAChBM,gBAAc,EACdC,oBAAkB,EAClBC,WAAW,QACXC,cAAe,GACfR,WAAW,YAGf,kBAAC,EAAD,CACAzF,UAAU,gBACNK,KAAK,OACLE,KAAK,UACLC,MAASN,KAAKkB,MAAM6B,QACpBvC,SAAUR,KAAKqB,eAEnB,kBAAC,EAAD,CACItB,SAAY,WAAO,EAAKkE,iBACxBrD,KAAK,aAIb,yBAAKd,UAAY,sBACb,kBAAC,EAAD,CACIyD,iBAAoBvD,KAAKkB,MAAM4C,eAEnC,kBAAC,EAAD,CACI/D,SAAY,WAAO,EAAKiG,qBACxBpF,KAAK,iBAET,kBAAC,EAAD,CACIb,SAAY,WAAO,EAAKkG,kBACxBrF,KAAK,+B,GAhPJH,cCJnByF,E,kDAEF,WAAYjG,GAAQ,IAAD,8BACf,cAAMA,IAEDiB,MAAQ,CACTF,SAAU,YAJC,E,2MAWKgB,MAAO,cAAe,CAClCC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,sB,cAJpBI,E,gBAQeA,EAAIC,O,QAAnBC,E,SAEUA,EAAOC,SACjBC,EAAU5B,SAAU,EACpB4B,EAAU3B,YAAa,IAIvB2B,EAAU5B,SAAU,EACpB4B,EAAU3B,YAAa,G,kDAK3B2B,EAAU5B,SAAU,EACpB4B,EAAU3B,YAAa,E,+IAM3B,OAAI2B,EAAU3B,WAEN,yBAAKjB,UAAU,oBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,OAKJ,yBAAKA,UAAU,eACX,kBAAC,EAAD,W,GApDFW,aAyDH0F,cAASD,GCrDJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzF,QAAQyF,MAAMA,EAAMC,a,4IEzI5BC,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.f269c2e9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/InputField.css'\r\n\r\nclass Inputfield extends Component {\r\n    render() {\r\n        return (\r\n                <form className=\"inputField\"\r\n                onSubmit = {this.props.onSubmit}>\r\n                    <label>\r\n                        {this.props.label}\r\n                    </label>\r\n                    <input\r\n                    className='input'\r\n                    type={this.props.type}\r\n                    placeholder={this.props.placeholder}\r\n             \t\tname={this.props.name}\r\n            \t\tvalue={this.props.value}\r\n            \t\tsize={15}\r\n\t\t\t\t\tonChange={this.props.onChange} />\r\n                </form>\r\n        );\r\n    }\r\n}\r\nexport default Inputfield","import React, { Component } from 'react';\r\nimport '../styles/SubmitButton.css'\r\n\r\nclass SubmitButton extends Component {\r\n    render() {\r\n        return (\r\n            <button \r\n            className='log-in-button'\r\n            type = 'submit'\r\n            onClick = {this.props.onSubmit}>\r\n                {this.props.text}\r\n            </button>\r\n        )};\r\n}\r\nexport default SubmitButton","import {extendObservable} from 'mobx';\r\n\r\nclass UserStore{\r\n    constructor() {\r\n        extendObservable(this, {\r\n            loading: true,\r\n            isLoggedIn: false,\r\n            username: ''\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();","import React, { Component } from 'react';\r\nimport InputField from '../components/InputField'\r\nimport SubmitButton from '../components/SubmitButton'\r\nimport UserStore from '../stores/UserStore';\r\nimport log_in_image from '../components/log-in-image.png'\r\nimport '../styles/LogIn.css'\r\n\r\nclass LogIn extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            //to prevent logging in twice\r\n            buttonDisabled: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleLogIn = this.handleLogIn.bind(this);\r\n        this.doLogIn = this.doLogIn.bind(this);\r\n    };\r\n    resetForm() {\r\n        this.setState({\r\n            username: '',\r\n            password: ''\r\n        })\r\n    }\r\n    handleChange(e) {\r\n\t\tthis.setState({[e.target.name]: e.target.value});\r\n\t}\r\n    handleLogIn(e) {\r\n        console.log(this.state.username)\r\n        console.log(this.state.password)\r\n        this.resetForm()\r\n    };\r\n\r\n    async doLogIn() {\r\n\r\n        if (this.state.username == '') {\r\n            alert('username is empty.')\r\n            return;\r\n        }\r\n        if (this.state.password == '') {\r\n            alert('password is empty.')\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            buttonDisabled: true\r\n        })\r\n\r\n        try { \r\n\r\n            let res = await fetch('/login', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/JSON',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: this.state.username,\r\n                    password: this.state.password\r\n                })\r\n            });\r\n\r\n            let result = await res.json();\r\n            if (result && result.success) {\r\n                UserStore.isLoggedIn = true;\r\n                UserStore.username = result.username;\r\n            }\r\n\r\n            else if (result && result.success === false) {\r\n                this.resetForm();\r\n                alert(result.msg);\r\n            }\r\n        }\r\n            catch(e) {\r\n                console.log(e);\r\n                this.resetForm();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login-container\">\r\n                {/* <img src = {log_in_image} className = \"log-in-image\" alt = \"image\"/> */}\r\n\r\n                <InputField\r\n                label='Username:'\r\n                type='username'\r\n                placeholder='Username'\r\n                name='username'\r\n                value={this.state.username}\r\n                onChange = {this.handleChange}\r\n                onSubmit = {() => {this.doLogIn()}}\r\n                />\r\n\r\n                <InputField\r\n                label='Password:'\r\n                type='password'\r\n                placeholder='Password'\r\n                name='password'\r\n                value={this.state.password}\r\n                onChange = {this.handleChange}\r\n                onSubmit = {() => {this.doLogIn()}}\r\n                />\r\n\r\n                <SubmitButton\r\n                onSubmit = {() => {this.doLogIn()}}\r\n                text = {'Log In'}\r\n                />\r\n            </div>\r\n        )};\r\n}\r\nexport default LogIn","import React, { Component } from 'react';\r\nimport '../styles/Navbar.css';\r\n\r\nclass Navbar extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<header>\r\n\t\t\t\t<h1>KACP Zoom Scheduler</h1>\r\n\t\t\t\t<nav>\r\n\t\t\t\t\t<ul className='navItems'>\r\n\t\t\t\t\t\t<li><a>Log In</a></li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</nav>\r\n\t\t\t</header>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport '../styles/AppointmentCards.css'\r\n\r\nclass AppointmentCards extends Component {\r\n\r\n    render() {\r\n        const {date, time, purpose, startTime, endTime, zoom_username, meetingID} = this.props;\r\n        return (\r\n                <div className=\"appointment-card\">\r\n                    <div className=\"appointment-content\">\r\n                        <h3 calssName=\"date\">date: {date}</h3>\r\n                        <h3 className=\"startTime\">starts: {startTime}</h3>\r\n                        <h3 className=\"endTime\">ends: {endTime}</h3>\r\n                        <h3 className=\"purpose\">{purpose}</h3>\r\n                        <h3 className=\"zoom-username\">{zoom_username}</h3>\r\n                    </div>\r\n                    {/* <h2 className=\"meetingID\">{meetingID}</h2> */}\r\n                </div>\r\n        );\r\n    }\r\n}\r\nexport default AppointmentCards","import React, {Component} from 'react';\r\nimport AppointmentCards from './AppointmentCards';\r\n\r\nclass AppointmentList extends Component {\r\n\r\n    render() {\r\n        const appointmentCards = this.props.appointmentCards.map((r, index) => (\r\n            <AppointmentCards key = {r.id} {...r} />\r\n        ));\r\n        if (appointmentCards === [] ) {\r\n        return (\r\n            <div className = 'empty-appointment-list'>\r\n                currently no appointments are made.\r\n            </div>\r\n        )\r\n        }\r\n        else {\r\n            return (\r\n            <div className = 'appointment-list'>\r\n                {appointmentCards}\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default AppointmentList;","import React, { Component } from 'react';\r\nimport InputField from '../components/InputField'\r\nimport SubmitButton from '../components/SubmitButton'\r\nimport AppointmentList from '../components/AppointmentList'\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { addDays } from 'date-fns';\r\nimport UserStore from '../stores/UserStore'\r\n\r\n\r\nimport '../styles/TimePicker.css';\r\n\r\nclass TimePicker extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            username: '',\r\n            date: '',\r\n            startTime: '',\r\n            endTime: '',\r\n            purpose: '',\r\n            buttonDisabled: false,\r\n            appointments: [],\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n        this.handleTimeChange = this.handleTimeChange.bind(this);\r\n        this.doAppointment = this.doAppointment.bind(this);\r\n        this.timeToInt = this.timeToInt.bind(this);\r\n        this.timesToDuration = this.timesToDuration.bind(this);\r\n    };\r\n\r\n    handleChange(e) {\r\n\t\tthis.setState({[e.target.name]: e.target.value});\r\n\t}\r\n\r\n    handleDateChange(date, name) {\r\n        this.setState({[name]: date});\r\n    }\r\n\r\n    handleTimeChange(value, name) {\r\n        this.setState({[name]: value});\r\n    }\r\n\r\n    timeToInt(time) {\r\n        let timeString = ''\r\n        time.split(\":\").forEach((element) => {\r\n            timeString += element;\r\n        });\r\n        var timeInt = parseInt(timeString)\r\n        return timeInt;\r\n    }\r\n\r\n    timesToDuration(startTimeInt, endTimeInt) {\r\n        var duration = [];\r\n        while(startTimeInt <= endTimeInt) {\r\n            duration.push(startTimeInt);\r\n            if (startTimeInt%100 === 0) {\r\n                startTimeInt += 30\r\n            }\r\n            else {\r\n                startTimeInt += 70\r\n            }\r\n        }\r\n        return duration;\r\n    }\r\n    \r\n    //when page loads, check appointments that are under the current username\r\n    async componentDidMount() {\r\n        const username = UserStore.username;\r\n        console.log(\"THIS IS USERNAME: \" + username)\r\n\r\n        try{\r\n    \r\n            let res = await fetch ('/getAppointment', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/JSON',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: username,\r\n                })\r\n            });\r\n\r\n            let result = await res.json();\r\n\r\n            const appointments = result.appointments;\r\n            this.setState({appointments})\r\n        }\r\n\r\n        catch(e) {\r\n            UserStore.loading = false;\r\n            UserStore.isLoggedIn = false;\r\n        }\r\n\r\n    };\r\n\r\n    async getZoomMeeting() {\r\n        try{\r\n            let res = await fetch ('/getZoomMeeting', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/JSON',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    email: 'itteam@kacp.org'\r\n                })\r\n            })\r\n            let result = await res.json();\r\n            const meetingUrl = result.meetingUrl;\r\n            console.log(meetingUrl);\r\n        }\r\n\r\n        catch(e) {\r\n            console.log(e)\r\n        }\r\n    };\r\n\r\n    async doAppointment() {\r\n        if (\r\n            this.state.date === '' || \r\n            this.state.startTime === '' || \r\n            this.state.endTime === '' || \r\n            this.state.purpose === ''){\r\n            alert('Please fill out all fields.')\r\n            return;\r\n        }\r\n        \r\n        const username = UserStore.username;\r\n        const date = this.state.date.toLocaleDateString('en-GB');\r\n        const startTime = this.state.startTime.toLocaleTimeString('en-GB', {hour: '2-digit', minute: '2-digit'});\r\n        const endTime = this.state.endTime.toLocaleTimeString('en-GB', {hour: '2-digit', minute: '2-digit'});\r\n        const purpose = this.state.purpose;\r\n\r\n        var startTimeInt = this.timeToInt(startTime);\r\n        var endTimeInt = this.timeToInt(endTime);\r\n        console.log(endTimeInt)\r\n\r\n        //if the date passes 12:00 don't allow appointment.\r\n        if (this.state.date < this.state.startTime || startTimeInt > endTimeInt){\r\n            alert('Invalid time.')\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            buttonDisabled: true\r\n        })\r\n\r\n        //make duration into duration array with 30 minute increments.\r\n        var duration = this.timesToDuration(startTimeInt, endTimeInt)\r\n        try { \r\n            let res = await fetch('/appointment', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/JSON',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: username,\r\n                    date: date,\r\n                    duration: duration,\r\n                    purpose: purpose,\r\n                    startTime: startTime,\r\n                    endTime: endTime,\r\n                })\r\n            });\r\n            \r\n            let result = await res.json();\r\n            if (result && result.success) {\r\n                alert(result.msg);\r\n            }\r\n\r\n            else if (result && result.success === false) {\r\n                alert(result.msg);\r\n            }\r\n        }\r\n        catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { date, startTime, endTime } = this.state;\r\n        return (\r\n            <div className = \"appointment-container\">\r\n                <div className=\"AppointmentPicker\">\r\n                    <h3 className = 'welcome'>{UserStore.username}</h3>\r\n                    <DatePicker\r\n                        className = \"date-picker\"\r\n                        name=\"date\"\r\n                        selected={date}\r\n                        onChange={(date) => this.handleDateChange(date, \"date\")}\r\n                        onSelect={this.handleClick}\r\n                        placeholderText=\"Select Date\"\r\n                        dateFormat=\"MM/dd/yyyy\"\r\n                        minDate={addDays(new Date(), 1)}\r\n                        maxDate={addDays(new Date(), 8)}\r\n                    />\r\n                    <DatePicker\r\n                        className = \"start-time-picker\"\r\n                        name=\"startTime\"\r\n                        selected={startTime}\r\n                        onChange={(startTime) => this.handleDateChange(startTime, \"startTime\")}\r\n                        onSelect={this.handleClick}\r\n                        placeholderText=\"Select Starting Time\"\r\n                        showTimeSelect\r\n                        showTimeSelectOnly\r\n                        timeFormat=\"HH:mm\"\r\n                        timeIntervals={30}\r\n                        dateFormat=\"h:mm aa\"\r\n                    />\r\n\r\n                    <DatePicker\r\n                        className = \"end-time-picker\"\r\n                        name=\"endTime\"\r\n                        selected={endTime}\r\n                        onChange={(endTime) => this.handleDateChange(endTime, \"endTime\")}\r\n                        onSelect={this.handleClick}\r\n                        placeholderText=\"Select Ending Time\"\r\n                        showTimeSelect\r\n                        showTimeSelectOnly\r\n                        timeFormat=\"HH:mm\"\r\n                        timeIntervals={30}\r\n                        dateFormat=\"h:mm aa\"\r\n                    />\r\n\r\n                    <InputField \r\n                    className=\"PurposePicker\"\r\n                        type=\"text\"\r\n                        name=\"purpose\"\r\n                        value = {this.state.purpose}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <SubmitButton\r\n                        onSubmit = {() => {this.doAppointment()}}\r\n                        text='Confirm'\r\n                    />\r\n                </div>\r\n\r\n                <div className = \"AppointmentChecker\">\r\n                    <AppointmentList\r\n                        appointmentCards = {this.state.appointments}\r\n                    />\r\n                    <SubmitButton\r\n                        onSubmit = {() => {this.componentDidMount()}}\r\n                        text='Appointments'\r\n                    />\r\n                    <SubmitButton\r\n                        onSubmit = {() => {this.getZoomMeeting()}}\r\n                        text='Testing Zoom Meeting'\r\n                    />\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TimePicker;","import React, { Component } from 'react';\r\nimport {observer} from 'mobx-react';\r\nimport LogIn from './pages/LogIn'\r\nimport Navbar from './components/Navbar'\r\nimport TimePicker from './pages/TimePicker'\r\nimport UserStore from './stores/UserStore'\r\nimport './styles/LogIn.css'\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            username: 'username',\r\n        }\r\n    };\r\n\r\n\r\n    async componentDidMount() {\r\n        try{\r\n            let res = await fetch ('/isLoggedIn', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application.json'\r\n                }\r\n            });\r\n\r\n            let result = await res.json();\r\n\r\n            if (result && result.success) {\r\n                UserStore.loading = false;\r\n                UserStore.isLoggedIn = true;\r\n            }\r\n\r\n            else {\r\n                UserStore.loading = false;\r\n                UserStore.isLoggedIn = false;\r\n            }\r\n        }\r\n\r\n        catch(e) {\r\n            UserStore.loading = false;\r\n            UserStore.isLoggedIn = false;\r\n        }\r\n    };\r\n\r\n    render() {\r\n        \r\n        if (UserStore.isLoggedIn) {\r\n            return (\r\n                <div className=\"time-picker-page\">\r\n                    <Navbar />\r\n                    <TimePicker/>\r\n                </div>\r\n                )}\r\n        else {\r\n            return (\r\n                <div className=\"log-in-page\">\r\n                    <LogIn />\r\n                </div>\r\n        )};\r\n    }\r\n}\r\nexport default observer(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/log-in-image.8285a10e.png\";"],"sourceRoot":""}
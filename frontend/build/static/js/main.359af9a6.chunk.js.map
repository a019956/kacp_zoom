{"version":3,"sources":["components/NavbarItem.js","components/Navbar.js","components/InputField.js","components/SubmitButton.js","stores/UserStore.js","pages/LogIn.js","pages/LandingPage.js","components/TimeCard.js","components/SelectMenu.js","components/TimeChecker.js","components/AppointmentCards.js","components/AppointmentList.js","components/EmailShare.js","pages/ZoomPicker.js","pages/RoomPicker.js","App.js","serviceWorker.js","index.js","components/log-in-image.png"],"names":["NavbarItem","this","props","name","page","onPage","claasName","onClick","Component","Navbar","username","today","navItems","map","r","className","Inputfield","label","type","placeholder","value","size","onChange","autoComplete","SubmitButton","text","extendObservable","loading","isLoggedIn","LogIn","state","password","buttonDisabled","handleChange","bind","doLogIn","handleSubmit","e","setState","target","preventDefault","alert","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","msg","console","log","src","log_in_image","onSubmit","LandingPage","TimeCard","time","date","availability","SelectMenu","endLabel","options","index","key","AppointmentCards","purpose","startTime","endTime","zoom_username","join_url","start_url","meeting_id","onStart","onDelete","onEmailShare","onKakaoTalk","AppointmentList","appointmentCards","id","EmailShare","onCancel","from_name","start_time","end_time","sendEmail","ZoomPicker","format","Date","appointments","reucurringMeetings","recurrence","recurrenceOptions","recurrenceOption","recurrenceTypes","recurrenceType","recurrenceWeeks","recurrenceWeek","recurrenceDays","recurrenceDay","recurrenceIntervals","recurrenceInterval","recurrenceTimes","recurrenceTime","share_join_url","share_start_time","share_end_time","share_date","share_purpose","handleDateChange","handleTimeChange","doAppointment","deleteAppointment","timeToInt","timesToDuration","getAppointment","timeString","split","forEach","element","parseInt","startTimeInt","endTimeInt","durationArray","push","toLocaleDateString","toLocaleTimeString","hour","minute","second","duration","length","window","open","emailjs","sendForm","then","error","for","selected","onSelect","handleClick","placeholderText","dateFormat","minDate","maxDate","addDays","showTimeSelect","showTimeSelectOnly","timeFormat","timeIntervals","Paper","style","padding","height","width","overflow","startMeeting","RoomPicker","App","currentPage","changePage","testLogIn","observer","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.359af9a6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/NavbarItem.css';\r\n\r\nclass NavbarItem extends Component {\r\n\trender() {\r\n\t\tconst {name, page, onPage} = this.props;\r\n\t\treturn (\r\n            <div claasName='navbar-item' onClick={() => onPage(page)}>\r\n                {name}\r\n            </div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default NavbarItem;","import React, { Component } from 'react';\r\nimport NavbarItem from './NavbarItem'\r\nimport '../styles/Navbar.css';\r\n\r\nclass Navbar extends Component {\r\n\trender() {\r\n\t\tconst {username, today, onPage} = this.props;\r\n\t\tconst navItems = this.props.navItems.map((r) => (\r\n\t\t\t<NavbarItem {...r} onPage={onPage} />\r\n\t\t));\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<header>\r\n\t\t\t\t<h1>Welcome, {username}</h1>\r\n\t\t\t\t<nav>\r\n\t\t\t\t<ul className = 'navItems'>\r\n\t\t\t\t\t{navItems}\r\n\t\t\t\t</ul>\r\n\t\t\t\t</nav>\r\n\t\t\t\t<h2>Today is {today}</h2>\r\n\t\t\t</header>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport '../styles/InputField.css'\r\n\r\nclass Inputfield extends Component {\r\n    render() {\r\n        return (\r\n                <div className='container' >\r\n                    <label>\r\n                        {this.props.label}\r\n                    </label>\r\n                    <input\r\n                    className='input'\r\n                    type={this.props.type}\r\n                    placeholder={this.props.placeholder}\r\n             \t\tname={this.props.name}\r\n            \t\tvalue={this.props.value}\r\n            \t\tsize={15}\r\n\t\t\t\t\tonChange={this.props.onChange} \r\n                    autoComplete=\"off\"\r\n                    />\r\n                </div>\r\n        );\r\n    }\r\n}\r\nexport default Inputfield","import React, { Component } from 'react';\r\nimport '../styles/SubmitButton.css'\r\n\r\nclass SubmitButton extends Component {\r\n    render() {\r\n        return (\r\n            <button \r\n            type = 'submit'\r\n            className='log-in-button'\r\n            >\r\n                {this.props.text}\r\n            </button>\r\n        )};\r\n}\r\nexport default SubmitButton","import {extendObservable} from 'mobx';\r\n\r\nclass UserStore{\r\n    constructor() {\r\n        extendObservable(this, {\r\n            loading: true,\r\n            isLoggedIn: false,\r\n            username: ''\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();","import React, { Component } from 'react';\r\nimport '../styles/LogIn.css'\r\nimport InputField from '../components/InputField'\r\nimport SubmitButton from '../components/SubmitButton'\r\nimport UserStore from '../stores/UserStore';\r\nimport log_in_image from '../components/log-in-image.png'\r\n\r\n\r\nclass LogIn extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            //to prevent logging in twice\r\n            buttonDisabled: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.doLogIn = this.doLogIn.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    };\r\n\r\n    //  At change of input, change state.\r\n    handleChange(e) {\r\n\t\tthis.setState({[e.target.name]: e.target.value});\r\n    }\r\n    \r\n\r\n    //  FOR LOG-IN\r\n    //  If there is an error with log-in, reset password to emtpy.\r\n    resetForm() {\r\n        this.setState({\r\n            password: ''\r\n        })\r\n    }\r\n\r\n    //  Check if username or password is empty.\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (this.state.username == '') {\r\n            alert('username is empty.')\r\n            return;\r\n        }\r\n        if (this.state.password == '') {\r\n            alert('password is empty.')\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            buttonDisabled: true\r\n        })\r\n\r\n        //  If they are not empty, send log-in request to router.\r\n        this.doLogIn()\r\n    }\r\n\r\n    //  Send log-in request to router.\r\n    async doLogIn() {\r\n        \r\n        try { \r\n\r\n            let res = await fetch('/login', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/JSON',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: this.state.username,\r\n                    password: this.state.password\r\n                })\r\n            });\r\n\r\n            //  If there is a matching username and password in the database, let user log-in to the application.\r\n            let result = await res.json();\r\n            if (result && result.success) {\r\n                UserStore.username = result.username;\r\n                UserStore.isLoggedIn = true;\r\n            }\r\n\r\n            //  If there is a mismatch, aler user with error message and reset password input.\r\n            else if (result && result.success === false) {\r\n                this.resetForm();\r\n                alert(result.msg);\r\n            }\r\n        }\r\n            //Handle errors\r\n            catch(e) {\r\n                console.log(e);\r\n                this.resetForm();\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n\r\n            <img src={log_in_image}/>\r\n                <form \r\n                className=\"input-fields\"\r\n                onSubmit={this.handleSubmit}>\r\n\r\n                    <InputField\r\n                    label='Username:'\r\n                    type='username'\r\n                    placeholder='Username'\r\n                    name='username'\r\n                    value={this.state.username}\r\n                    onChange = {this.handleChange}\r\n                    />\r\n\r\n                    <InputField\r\n                    label='Password:'\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    name='password'\r\n                    value={this.state.password}\r\n                    onChange = {this.handleChange}\r\n                    />\r\n\r\n                    <SubmitButton\r\n                    text = {'Log In'}\r\n                    />\r\n\r\n                </form>\r\n\r\n                <div className=\"account-request\">\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )};\r\n}\r\nexport default LogIn","import React, { Component } from 'react';\r\n\r\n//  FOR FUTURE USE\r\n\r\nclass LandingPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                THIS IS LANDING PAGE\r\n            </div>\r\n        )};\r\n    }\r\nexport default LandingPage","import React, {Component} from 'react'\r\n\r\nclass TimeCard extends Component{\r\n    render() {\r\n        const {date, time, availability} = this.props;\r\n\r\n        return(\r\n            <div className=\"time-card\"\r\n            time={time}\r\n            availability={availability}\r\n            >\r\n                <div>\r\n                    {time}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimeCard","import React, { Component } from 'react';\r\nimport '../styles/SelectMenu.css'\r\n\r\n\r\nclass SelectMenu extends Component {\r\n    render() {\r\n        const {name, label, onChange, value, endLabel} = this.props;\r\n        const options = this.props.options.map((r, index) => (\r\n            <option key={r.value} {...r}>{r.name}</option>\r\n        ));\r\n        return (\r\n            <div className='SelectContainer'>\r\n                <label className='SelectLabel'>\r\n                    {label}\r\n                </label>\r\n                <select \r\n                    className='SelectOptions'\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    value={value}\r\n                >\r\n                {options}\r\n                </select>\r\n                <label className='SelectLabel'>\r\n                    {endLabel}\r\n                </label>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SelectMenu","import React, { Component } from 'react';\r\nimport TimeCard from './TimeCard';\r\n\r\nclass TimeDisplay extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    render () {\r\n        const {date, onClick} = this.props;\r\n        const timeCards = this.props.timeCards.map((r) => (\r\n            <TimeCard {...r} onClick={onClick}/>\r\n        ))\r\n        return (\r\n            <div className=\"email-share\">\r\n                <text> Availability on {date} </text>\r\n                <div className=\"time-card-container\">\r\n                    {timeCards}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TimeDisplay","import React, {Component} from 'react';\r\nimport '../styles/AppointmentCards.css'\r\n\r\nclass AppointmentCards extends Component {\r\n\r\n    render() {\r\n        const {date,  purpose, startTime, endTime, zoom_username, join_url, \r\n            start_url, meeting_id, onStart, onDelete, onEmailShare, onKakaoTalk} = this.props;\r\n        return (\r\n            <div className=\"appointment-card\">\r\n                <div className='meeting-info-container'>\r\n                    <h3 className=\"agenda\">{purpose}: {date}</h3>\r\n                    <h3 className=\"duration\">{startTime} - {endTime}</h3>\r\n                    <h3 className=\"zoom-username\">{zoom_username}</h3>\r\n                    <h3 className=\"join-url\">Invite Link: {join_url}</h3>\r\n                </div>\r\n                <div className=\"button-container\">\r\n                    <button\r\n                    className=\"start-button\"\r\n                    onClick = {() => onStart(start_url)}\r\n                    >\r\n                        Start\r\n                    </button>\r\n                    <button\r\n                    className=\"email-button\"\r\n                    onClick = {() => onEmailShare(join_url, startTime, endTime, date, purpose)}\r\n                    >\r\n                        Share\r\n                    </button>\r\n                    <button\r\n                    className=\"delete-button\"\r\n                    onClick = {() => onDelete(meeting_id)}\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default AppointmentCards;","import React, {Component} from 'react';\r\nimport AppointmentCards from './AppointmentCards';\r\n\r\nclass AppointmentList extends Component {\r\n\r\n    render() {\r\n        const {onStart, onDelete, onEmailShare} = this.props;\r\n        const appointmentCards = this.props.appointmentCards.map((r, index) => (\r\n            <AppointmentCards key = {r.id} {...r} onStart={onStart} onDelete={onDelete} onEmailShare={onEmailShare}/>\r\n        ));\r\n        if (appointmentCards === [] ) {\r\n        return (\r\n            <div className = 'empty-appointment-list'>\r\n                currently no appointments are made.\r\n            </div>\r\n        )\r\n        }\r\n        else {\r\n            return (\r\n            <div className = 'appointment-list'>\r\n                {appointmentCards}\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default AppointmentList;","import React, { Component } from 'react';\r\nimport InputField from './InputField'\r\nimport '../styles/EmailShare.css';\r\n\r\nclass EmailShare extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n    render () {\r\n        const {onCancel, from_name, join_url, start_time, end_time, date, purpose} = this.props;\r\n\r\n        return (\r\n            <div className=\"email-share\">\r\n                <button onCancel={onCancel}>X</button>\r\n                <div className=\"share-info-container\">\r\n                    <h3 className=\"share-meeting\">\r\n                        회의 공유/Share Meeting\r\n                    </h3>\r\n                    <text className=\"share-meeting-info\">Invitation for Zoom Meeting for {purpose} {'\\n'} on {date} from {start_time} - {end_time} {'\\n'}Join with: {join_url}</text>\r\n                </div>\r\n                <form className=\"contact-form\" onSubmit={this.props.sendEmail}>\r\n                    <InputField type=\"hidden\" name=\"from_name\" value={from_name}/>\r\n                    <InputField type=\"hidden\" name=\"join_url\" value={join_url}/>\r\n                    <InputField type=\"hidden\" name=\"start_time\" value={start_time}/>\r\n                    <InputField type=\"hidden\" name=\"end_time\" value={end_time}/>\r\n                    <InputField type=\"hidden\" name=\"date\" value={date}/>\r\n                    <InputField type=\"hidden\" name=\"purpose\" value={purpose}/>\r\n                    <label>발신자/From</label>\r\n                    <InputField type=\"text\" name=\"from_name\"/>\r\n                    <label>수신자/Recipient</label>\r\n                    <InputField type=\"text\" name=\"recipient\"/>\r\n                    <label>더할 내용/Additional Message</label>\r\n                    <textarea name=\"message\" />\r\n                    <button type=\"submit\" value=\"Send\">Share</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EmailShare\r\n","import React, { Component } from 'react';\r\nimport TimeChecker from '../components/TimeChecker'\r\nimport SelectMenu from '../components/SelectMenu'\r\nimport InputField from '../components/InputField'\r\nimport SubmitButton from '../components/SubmitButton'\r\nimport AppointmentList from '../components/AppointmentList'\r\nimport EmailShare from '../components/EmailShare'\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport emailjs from 'emailjs-com';\r\nimport { addDays , format } from 'date-fns';\r\nimport UserStore from '../stores/UserStore'\r\nimport '../styles/ZoomPicker.css';\r\nimport { Paper } from '@material-ui/core';\r\n\r\nclass ZoomPicker extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            today: format(new Date(), 'yyyy-MM-dd'),\r\n            username: '',\r\n            date: '',\r\n            startTime: '',\r\n            endTime: '',\r\n            purpose: '',\r\n            buttonDisabled: false,\r\n            appointments: [],\r\n            reucurringMeetings: [],\r\n            //Select menus for recurring meetings\r\n            recurrence: false,\r\n            recurrenceOptions: [\r\n                {name: 'One-time', value: '2'},\r\n                {name: 'Repeating', value: '8'}\r\n            ],\r\n            recurrenceOption: '',\r\n            recurrenceTypes: [\r\n                {name: 'Weekly', value: '2',},\r\n                {name: 'Monthly', value: '3',}\r\n            ],\r\n            recurrenceType: 2,\r\n            recurrenceWeeks: [\r\n                {name: 'First', value: '1'},\r\n                {name: 'Second', value: '2'},\r\n                {name: 'Third', value: '3'},\r\n                {name: 'Fourth', value: '4'},\r\n                {name: 'Last', value: '-1'},\r\n            ],\r\n            recurrenceWeek: 1,\r\n            recurrenceDays: [\r\n                {name: 'Sunday', value: '7',},\r\n                {name: 'Monday', value: '1',},\r\n                {name: 'Tuesday',value: '2',},\r\n                {name: 'Wednesday', value: '3',},\r\n                {name: 'Thursday', value: '4',},\r\n                {name: 'Friday', value: '5',},\r\n                {name: 'Saturday', value: '6',},\r\n            ],\r\n            recurrenceDay: 1,\r\n            recurrenceIntervals: [\r\n                {name: '1', value: '1',},\r\n                {name: '2', value: '2',},\r\n                {name: '3', value: '3',},\r\n            ],\r\n            recurrenceInterval: 1,\r\n            recurrenceTimes: [\r\n                {name: '1', value: '1',},\r\n                {name: '2', value: '2',},\r\n                {name: '3', value: '3',},\r\n                {name: '4', value: '4',},\r\n                {name: '5', value: '5',},\r\n                {name: '6', value: '6',},\r\n                {name: '7', value: '7',},\r\n                {name: '8', value: '8',},\r\n                {name: '9', value: '9',},\r\n                {name: '10', value: '10',},\r\n                {name: '11', value: '11',},\r\n                {name: '12', value: '12',},\r\n                {name: '13', value: '13',},\r\n                {name: '14', value: '14',},\r\n                {name: '15', value: '15',},\r\n                {name: '16', value: '16',}\r\n            ],\r\n            recurrenceTime: 2,\r\n\r\n            //state for email sharing\r\n            share_join_url: '',\r\n            share_start_time: '',\r\n            share_end_time: '',\r\n            share_date: '',\r\n            share_purpose: '', \r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n        this.handleTimeChange = this.handleTimeChange.bind(this);\r\n        this.doAppointment = this.doAppointment.bind(this);\r\n        this.deleteAppointment = this.deleteAppointment.bind(this);\r\n        this.onEmailShare = this.onEmailShare.bind(this);\r\n        this.sendEmail = this.sendEmail.bind(this);\r\n        this.timeToInt = this.timeToInt.bind(this);\r\n        this.timesToDuration = this.timesToDuration.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.onCancel = this.onCancel.bind(this);\r\n    };\r\n\r\n    //  Upon loading of the page, load all appointments \r\n    componentDidMount() {\r\n        const username = UserStore.username\r\n        this.setState({username});\r\n        this.getAppointment();\r\n    }\r\n\r\n    //  Updates states upon change of values.\r\n    handleChange(e) {\r\n\t\tthis.setState({[e.target.name]: e.target.value});\r\n    }\r\n    handleDateChange(date, name) {\r\n        this.setState({[name]: date});\r\n    }\r\n    handleTimeChange(value, name) {\r\n        this.setState({[name]: value});\r\n    }\r\n\r\n\r\n    //  Function to change time string to 6 digit integer value for calculations and JSON formatting\r\n    timeToInt(time) {\r\n        let timeString = ''\r\n        time.split(\":\").forEach((element) => {\r\n            timeString += element;\r\n        });\r\n        var timeInt = parseInt(timeString)\r\n        return timeInt;\r\n    }\r\n\r\n    //  Changes starting time and ending time to duration array.\r\n    timesToDuration(startTimeInt, endTimeInt) {\r\n        var durationArray = [];\r\n        while(startTimeInt <= endTimeInt) {\r\n            durationArray.push(startTimeInt);\r\n            if (startTimeInt%10000 === 0) {\r\n                startTimeInt += 3000\r\n            }\r\n            else {\r\n                startTimeInt += 7000\r\n            }\r\n        }\r\n        return durationArray;\r\n    }\r\n    \r\n    //  Submitting meetings to be checked for validity.\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        //  If some field is emtpy, return error.\r\n        if (\r\n            this.state.date === '' || \r\n            this.state.startTime === '' || \r\n            this.state.endTime === '' || \r\n            this.state.purpose === ''){\r\n            alert('Please fill out all fields.')\r\n            return;\r\n        }\r\n        this.doAppointment()\r\n    }\r\n\r\n    //  Create appointment based on infromation given by the user\r\n    async doAppointment() {\r\n        const today = format(new Date(), 'yyyy-MM-dd')\r\n        const username = this.state.username;\r\n        const date = this.state.date.toLocaleDateString(\"fr-CA\");\r\n        const startTime = this.state.startTime.toLocaleTimeString(\"en-GB\", {hour: '2-digit', minute: '2-digit', second: '2-digit'});\r\n        const endTime = this.state.endTime.toLocaleTimeString(\"en-GB\", {hour: '2-digit', minute: '2-digit', second: '2-digit'});\r\n        const purpose = this.state.purpose;\r\n        const recurrenceType = this.state.recurrenceType;\r\n        const recurrenceOption = this.state.recurrenceOption;\r\n        const recurrenceInterval = this.state.recurrenceInterval;\r\n        const recurrenceWeek = this.state.recurrenceWeek;\r\n        const recurrenceDay = this.state.recurrenceDay;\r\n        const recurrenceTime = this.state.recurrenceTime;\r\n\r\n        var startTimeInt = this.timeToInt(startTime);\r\n        var endTimeInt = this.timeToInt(endTime);\r\n\r\n        //  If the date given by the user is before today or startime is after endtime, return error.\r\n        if (this.state.date < today || startTimeInt > endTimeInt){\r\n            alert('Invalid time.')\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            buttonDisabled: true\r\n        })\r\n\r\n        //  Make duration into duration array with 30 minute increments to be saved in the database.\r\n        var durationArray = this.timesToDuration(startTimeInt, endTimeInt)\r\n        //  Duration in minutes\r\n        var duration = (durationArray.length - 1) * 30\r\n        try { \r\n            let res = await fetch('/doAppointment', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/JSON',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                //  Send JSON to router to be inserted into database.\r\n                body: JSON.stringify({\r\n                    username: username,\r\n                    date: date,\r\n                    duration: duration,\r\n                    durationArray: durationArray,\r\n                    purpose: purpose,\r\n                    startTime: startTime,\r\n                    endTime: endTime,\r\n                    recurrenceType: recurrenceType,\r\n                    recurrenceOption: recurrenceOption,\r\n                    recurrenceInterval: recurrenceInterval,\r\n                    recurrenceWeek: recurrenceWeek,\r\n                    recurrenceDay: recurrenceDay,\r\n                    recurrenceTime: recurrenceTime,\r\n                    \r\n                })\r\n            });\r\n            //  Meeting is successfully made.\r\n            let result = await res.json();\r\n            if (result && result.success) {\r\n                alert(result.msg);\r\n            }\r\n            //  If time collides with other meetings, return fail.\r\n            else if (result && result.success === false) {\r\n                alert(result.msg);\r\n            }\r\n        }\r\n        //  Handle errors\r\n        catch(e) {\r\n            console.log(e);\r\n        }\r\n        this.getAppointment()\r\n    }\r\n\r\n    //  Loads appointments for front-end display that are under the current username\r\n    async getAppointment() {\r\n        const username = UserStore.username;\r\n        const today = format(new Date(), 'yyyy-MM-dd')\r\n\r\n        try{\r\n            let res = await fetch ('/getAppointment', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/JSON',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: username,\r\n                    today: today,\r\n                })\r\n            });\r\n\r\n            let result = await res.json();\r\n            //  Get appointments made by the user from the database, and set react state with retrieved data.\r\n            const appointments = result.appointments;\r\n            this.setState({appointments})\r\n        }\r\n        //  Handle errors\r\n        catch(e) {\r\n            UserStore.loading = false;\r\n            UserStore.isLoggedIn = false;\r\n        }\r\n\r\n    };\r\n\r\n    //  When start button is pressed, open Zoom meeting start url retrieved from Zoom API.\r\n    startMeeting(start_url) {\r\n        window.open(start_url)\r\n    }\r\n\r\n    //  Delete meeting from the database and make DELETE request to Zoom API.\r\n    async deleteAppointment(meeting_id) {\r\n        const id = meeting_id\r\n        \r\n        //  Send meeting ID retrieved from Zoom API to router.\r\n        try { \r\n            let res = await fetch('/deleteAppointment', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/JSON',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    id: id\r\n                })\r\n            });\r\n            \r\n            let result = await res.json();\r\n            //  If successful, alert with success message.\r\n            if (result && result.success) {\r\n                alert(result.msg);\r\n            }\r\n            //  If there is an error, alert with error message.\r\n            else if (result && result.success === false) {\r\n                alert(result.msg);\r\n            }\r\n        }\r\n        //  Handle errors.\r\n        catch(e) {\r\n            console.log(e);\r\n        }\r\n        this.getAppointment()\r\n    }\r\n\r\n\r\n\r\n    //  SENDING EMAILS\r\n    //  When share button is pressed, set shared meeting information as state to be displayed on front end & to be sent as e-mail.\r\n    onEmailShare(join_url, startTime, endTime, date, purpose){\r\n        const share_join_url = join_url;\r\n        const share_start_time = startTime;\r\n        const share_end_time = endTime;\r\n        const share_date = date;\r\n        const share_purpose = purpose;\r\n        this.setState({share_join_url, share_start_time, share_end_time, share_date, share_purpose})\r\n    }\r\n\r\n    //  When cancel button is pressed, clear shared meeting information from state. \r\n    onCancel(){\r\n        this.setState({share_join_url: '', share_start_time: '', share_end_time: '', share_date: '', share_purpose: ''})\r\n    }\r\n\r\n    //  On submission,\r\n    sendEmail(e) {\r\n        e.preventDefault();\r\n\r\n        emailjs.sendForm('service_b2o90jd', 'template_95z7xck', e.target, 'user_vZliYk1PdzThlzI9zIDpR')\r\n            .then((result) => {\r\n                console.log(result.text);\r\n                alert('email was sent.')\r\n                \r\n            }, (error) => {\r\n                console.log(error.text);\r\n                alert('Error has occurred, please try again. Error:' + error)\r\n            });\r\n    }\r\n\r\n    //RENDER METHOD\r\n    render() {\r\n        const { date, startTime, endTime, purpose, recurrenceTypes, recurrenceType, \r\n            recurrenceOptions, recurrenceOption, recurrenceWeeks, recurrenceWeek,  recurrenceDays, recurrenceDay, recurrenceIntervals, recurrenceInterval,\r\n        recurrenceTimes, recurrenceTime, share_join_url, share_start_time, share_end_time,\r\n        share_date, share_purpose} = this.state;\r\n        return (\r\n            <div>\r\n                <div className = \"AppointmentContainer\">\r\n                    <div className=\"AppointmentPicker\">\r\n                        \r\n                        <form className=\"AppointmentForm\"\r\n                        onSubmit={this.handleSubmit}>\r\n\r\n                            <h3 className = 'welcome'>Hello, {UserStore.username}</h3>\r\n                            {/* <DateChecker/> */}\r\n                            <h4 className = 'today'>Today is: {this.state.today}</h4>\r\n                            <div className='recurrence-options'>\r\n                                <li className='tab-container' value={recurrenceOption} onChange={this.handleChange}>\r\n                                    <ul>\r\n                                        <input name=\"recurrenceOption\" type=\"radio\" id=\"tab01\" value='2'/>\r\n                                        <label for=\"tab01\">One-time</label>\r\n                                    </ul>\r\n                                    <ul>\r\n                                        <input name=\"recurrenceOption\" type=\"radio\" id=\"tab02\" value='8'/>\r\n                                        <label for=\"tab02\">Repeating</label>\r\n                                    </ul>\r\n                                </li>\r\n                                    {(recurrenceOption==8) && <div className='RecurrenceMenu'>\r\n                                    <SelectMenu\r\n                                        options={recurrenceTypes}\r\n                                        onChange={this.handleChange}\r\n                                        endLabel='meeting'\r\n                                        name='recurrenceType'\r\n                                        value={recurrenceType}\r\n                                    />\r\n\r\n\r\n                                    <SelectMenu\r\n                                        label='Every'\r\n                                        endLabel={(recurrenceType==2)?'Week(s)':'Month(s)'}\r\n                                        options={recurrenceIntervals}\r\n                                        onChange={this.handleChange}\r\n                                        name='recurrenceInterval'\r\n                                        value={recurrenceInterval}\r\n                                    />\r\n                                    {(recurrenceType==3) && <SelectMenu\r\n                                        label='On'\r\n                                        endLabel='week'\r\n                                        options={recurrenceWeeks}\r\n                                        onChange={this.handleChange}\r\n                                        name='recurrenceWeek'\r\n                                        value={recurrenceWeek}\r\n                                    />}\r\n\r\n                                    <SelectMenu\r\n                                        label='On'\r\n                                        options={recurrenceDays}\r\n                                        onChange={this.handleChange}\r\n                                        name='recurrenceDay'\r\n                                        value={recurrenceDay}\r\n                                    />\r\n\r\n                                    <SelectMenu\r\n                                        label='Ends after'\r\n                                        endLabel='meetings'\r\n                                        options={recurrenceTimes}\r\n                                        onChange={this.handleChange}\r\n                                        name='recurrenceTime'\r\n                                        value={recurrenceTime}\r\n                                    />\r\n                                </div>}\r\n                            </div>\r\n\r\n                            <label>Starting Date</label>\r\n                            <DatePicker\r\n                                className = \"time-picker\"\r\n                                name=\"date\"\r\n                                selected={date}\r\n                                onChange={(date) => this.handleDateChange(date, \"date\")}\r\n                                onSelect={this.handleClick}\r\n                                placeholderText=\"Starting Date\"\r\n                                dateFormat=\"yyyy-MM-dd\"\r\n                                minDate= {new Date()}\r\n                                maxDate={addDays(new Date(), 8)}\r\n                                autoComplete=\"off\"\r\n                            />\r\n\r\n                            <label>Starting Time</label>\r\n                            <DatePicker\r\n                                label='Start Time'\r\n                                className = \"time-picker\"\r\n                                name=\"startTime\"\r\n                                selected={startTime}\r\n                                onChange={(startTime) => this.handleDateChange(startTime, \"startTime\")}\r\n                                onSelect={this.handleClick}\r\n                                placeholderText=\"Starting Time\"\r\n                                showTimeSelect\r\n                                showTimeSelectOnly\r\n                                timeFormat=\"HH:mm\"\r\n                                timeIntervals={30}\r\n                                dateFormat=\"h:mm aa\"\r\n                                autoComplete=\"off\"\r\n                            />\r\n\r\n                            <label>Ending Time</label>\r\n                            <DatePicker\r\n                                className = \"time-picker\"\r\n                                name=\"endTime\"\r\n                                selected={endTime}\r\n                                onChange={(endTime) => this.handleDateChange(endTime, \"endTime\")}\r\n                                onSelect={this.handleClick}\r\n                                placeholderText=\"Ending Time\"\r\n                                showTimeSelect\r\n                                showTimeSelectOnly\r\n                                timeFormat=\"HH:mm\"\r\n                                timeIntervals={30}\r\n                                dateFormat=\"h:mm aa\"\r\n                                autoComplete=\"off\"\r\n                            />\r\n\r\n                            <InputField \r\n                                label=\"Purpose\"\r\n                                className=\"PurposePicker\"\r\n                                type=\"text\"\r\n                                name=\"purpose\"\r\n                                placeholder=\"Purpose\"\r\n                                value = {purpose}\r\n                                onChange={this.handleChange}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <SubmitButton\r\n                                text='Confirm'\r\n                            />\r\n                        </form>\r\n                    </div>\r\n\r\n                    <div className = \"AppointmentChecker\" >\r\n                        <div\r\n                        className=\"explanation\"\r\n                        type=\"text\"></div>\r\n                        <Paper style={{padding: '10px',height: '100%', width: '100%', overflow: 'auto'}}>\r\n                            <AppointmentList\r\n                                appointmentCards = {this.state.appointments}\r\n                                onStart={this.startMeeting}\r\n                                onDelete={this.deleteAppointment}\r\n                                onEmailShare={this.onEmailShare}\r\n                            />\r\n                        </Paper>\r\n                    </div>\r\n                    <div className = \"EmailShare\">\r\n                        {share_join_url!=''&&\r\n                        <EmailShare\r\n                            onCancel = {this.onCancel}\r\n                            sendEmail = {this.sendEmail}\r\n                            from_name={this.state.username}\r\n                            join_url={share_join_url}\r\n                            start_time={share_start_time}\r\n                            end_time={share_end_time}\r\n                            date={share_date}\r\n                            purpose={share_purpose}\r\n\r\n                            style={{height: '100%'}}\r\n                        />}\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ZoomPicker;","import React, { Component } from 'react';\r\n\r\n//  FOR FUTURE USE\r\n\r\nclass RoomPicker extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                THIS IS ROOMPICKER\r\n            </div>\r\n        )};\r\n    }\r\nexport default RoomPicker","import React, { Component } from 'react';\r\nimport {observer} from 'mobx-react';\r\nimport Navbar from './components/Navbar'\r\n\r\nimport LogIn from './pages/LogIn'\r\nimport LandingPage from './pages/LandingPage'\r\nimport ZoomPicker from './pages/ZoomPicker'\r\nimport RoomPicker from './pages/RoomPicker'\r\nimport UserStore from './stores/UserStore'\r\nimport './styles/LogIn.css'\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            username: '',\r\n            currentPage: '1',\r\n            navItems: [\r\n            //FOR FUTURE USE\r\n            // {\r\n            //     page: '0',\r\n            //     name: 'Home'\r\n            // },\r\n            // {\r\n            //     page: '1',\r\n            //     name: 'Zoom'\r\n            // },\r\n            // {\r\n            //     page: '2',\r\n            //     name: 'Room'\r\n            // }\r\n            ]\r\n        } \r\n        this.changePage = this.changePage.bind(this)\r\n        this.testLogIn = this.testLogIn.bind(this)\r\n    };\r\n\r\n    //  When application loads, check for log-in status.\r\n    //  If not logged in, return log-in page.\r\n    //  If logged in, render Zoom application.\r\n    async componentDidMount() {\r\n        try{\r\n            let res = await fetch ('/isLoggedIn', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application.json'\r\n                }\r\n            });\r\n\r\n            let result = await res.json();\r\n\r\n            if (result && result.success) {\r\n                UserStore.loading = false;\r\n                UserStore.isLoggedIn = true;\r\n                const username = UserStore.username\r\n                this.setState({username});\r\n            }\r\n\r\n            else {\r\n                UserStore.loading = false;\r\n                UserStore.isLoggedIn = false;\r\n            }\r\n        }\r\n\r\n        catch(e) {\r\n            UserStore.loading = false;\r\n            UserStore.isLoggedIn = false;\r\n        }\r\n    };\r\n\r\n    //  Change appliaton by clicking on Navbar. (Currently in development)\r\n    changePage(page){\r\n        const currentPage = page\r\n        this.setState({currentPage})\r\n    }\r\n    //FOR TEST PURPOSES ONLY\r\n    testLogIn(){\r\n        UserStore.isLoggedIn = true\r\n        UserStore.username = 'kacp'\r\n    }\r\n\r\n    render() {\r\n        const {navItems, currentPage} = this.state;\r\n        if (UserStore.isLoggedIn) {\r\n            return (\r\n                <div className=\"application\">\r\n                    <Navbar \r\n                        navItems={navItems}\r\n                        onPage={this.changePage}\r\n                    />\r\n                        {currentPage==0&&\r\n                        <LandingPage/>\r\n                        }\r\n                        {currentPage==1&&\r\n                        <ZoomPicker/>\r\n                        }\r\n                        {currentPage==2&&\r\n                        <RoomPicker/>\r\n                        }\r\n                </div>\r\n                )}\r\n        else {\r\n            return (\r\n                <div className=\"log-in-page\">\r\n                    <LogIn />\r\n                    <button onClick={this.testLogIn}>Test Login</button>\r\n                </div>\r\n        )};\r\n    }\r\n}\r\nexport default observer(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <App />\r\n  </div>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/log-in-image.4d946127.png\";"],"sourceRoot":""}